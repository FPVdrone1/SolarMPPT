
MPPT_V2.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001498  0000152c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001498  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800120  00800120  0000154c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000157c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000015c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016c4  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abf  00000000  00000000  00002dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00003893  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  00004a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ca  00000000  00000000  00004d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001227  00000000  00000000  0000540a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00006631  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
       4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
       8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
       c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      2c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__vector_11>
      30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      54:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__vector_21>
      58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      68:	91 02       	muls	r25, r17
      6a:	9b 02       	muls	r25, r27
      6c:	a5 02       	muls	r26, r21
      6e:	af 02       	muls	r26, r31
      70:	b9 02       	muls	r27, r25
      72:	c3 02       	muls	r28, r19
      74:	cd 02       	muls	r28, r29

00000076 <__ctors_end>:
      76:	11 24       	eor	r1, r1
      78:	1f be       	out	0x3f, r1	; 63
      7a:	cf ef       	ldi	r28, 0xFF	; 255
      7c:	d8 e0       	ldi	r29, 0x08	; 8
      7e:	de bf       	out	0x3e, r29	; 62
      80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
      82:	11 e0       	ldi	r17, 0x01	; 1
      84:	a0 e0       	ldi	r26, 0x00	; 0
      86:	b1 e0       	ldi	r27, 0x01	; 1
      88:	e8 e9       	ldi	r30, 0x98	; 152
      8a:	f4 e1       	ldi	r31, 0x14	; 20
      8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
      8e:	05 90       	lpm	r0, Z+
      90:	0d 92       	st	X+, r0
      92:	a0 32       	cpi	r26, 0x20	; 32
      94:	b1 07       	cpc	r27, r17
      96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
      98:	21 e0       	ldi	r18, 0x01	; 1
      9a:	a0 e2       	ldi	r26, 0x20	; 32
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
      a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
      a2:	a5 34       	cpi	r26, 0x45	; 69
      a4:	b2 07       	cpc	r27, r18
      a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
      a8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <main>
      ac:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <_exit>

000000b0 <__bad_interrupt>:
      b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <MPPT2>:
      b4:	cf 93       	push	r28
      b6:	df 93       	push	r29
      b8:	86 9f       	mul	r24, r22
      ba:	90 01       	movw	r18, r0
      bc:	87 9f       	mul	r24, r23
      be:	30 0d       	add	r19, r0
      c0:	96 9f       	mul	r25, r22
      c2:	30 0d       	add	r19, r0
      c4:	11 24       	eor	r1, r1
      c6:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
      ca:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
      ce:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <__data_end>
      d2:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <__data_end+0x1>
      d6:	21 15       	cp	r18, r1
      d8:	31 05       	cpc	r19, r1
      da:	19 f4       	brne	.+6      	; 0xe2 <MPPT2+0x2e>
      dc:	4f 5f       	subi	r20, 0xFF	; 255
      de:	5f 4f       	sbci	r21, 0xFF	; 255
      e0:	29 c0       	rjmp	.+82     	; 0x134 <MPPT2+0x80>
      e2:	e9 01       	movw	r28, r18
      e4:	ca 1b       	sub	r28, r26
      e6:	db 0b       	sbc	r29, r27
      e8:	de 01       	movw	r26, r28
      ea:	ec 01       	movw	r28, r24
      ec:	ce 1b       	sub	r28, r30
      ee:	df 0b       	sbc	r29, r31
      f0:	fe 01       	movw	r30, r28
      f2:	bb 23       	and	r27, r27
      f4:	24 f0       	brlt	.+8      	; 0xfe <MPPT2+0x4a>
      f6:	6a 30       	cpi	r22, 0x0A	; 10
      f8:	71 05       	cpc	r23, r1
      fa:	3c f4       	brge	.+14     	; 0x10a <MPPT2+0x56>
      fc:	17 c0       	rjmp	.+46     	; 0x12c <MPPT2+0x78>
      fe:	1a 16       	cp	r1, r26
     100:	1b 06       	cpc	r1, r27
     102:	64 f4       	brge	.+24     	; 0x11c <MPPT2+0x68>
     104:	6a 30       	cpi	r22, 0x0A	; 10
     106:	71 05       	cpc	r23, r1
     108:	4c f4       	brge	.+18     	; 0x11c <MPPT2+0x68>
     10a:	1e 16       	cp	r1, r30
     10c:	1f 06       	cpc	r1, r31
     10e:	1c f4       	brge	.+6      	; 0x116 <MPPT2+0x62>
     110:	41 50       	subi	r20, 0x01	; 1
     112:	51 09       	sbc	r21, r1
     114:	0f c0       	rjmp	.+30     	; 0x134 <MPPT2+0x80>
     116:	4f 5f       	subi	r20, 0xFF	; 255
     118:	5f 4f       	sbci	r21, 0xFF	; 255
     11a:	0c c0       	rjmp	.+24     	; 0x134 <MPPT2+0x80>
     11c:	ff 23       	and	r31, r31
     11e:	1c f0       	brlt	.+6      	; 0x126 <MPPT2+0x72>
     120:	4f 5f       	subi	r20, 0xFF	; 255
     122:	5f 4f       	sbci	r21, 0xFF	; 255
     124:	07 c0       	rjmp	.+14     	; 0x134 <MPPT2+0x80>
     126:	41 50       	subi	r20, 0x01	; 1
     128:	51 09       	sbc	r21, r1
     12a:	04 c0       	rjmp	.+8      	; 0x134 <MPPT2+0x80>
     12c:	1a 16       	cp	r1, r26
     12e:	1b 06       	cpc	r1, r27
     130:	64 f3       	brlt	.-40     	; 0x10a <MPPT2+0x56>
     132:	f4 cf       	rjmp	.-24     	; 0x11c <MPPT2+0x68>
     134:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
     138:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
     13c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
     140:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
     144:	ca 01       	movw	r24, r20
     146:	df 91       	pop	r29
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <Battery_charge>:
     14c:	ef 92       	push	r14
     14e:	ff 92       	push	r15
     150:	0f 93       	push	r16
     152:	1f 93       	push	r17
     154:	29 98       	cbi	0x05, 1	; 5
     156:	80 17       	cp	r24, r16
     158:	91 07       	cpc	r25, r17
     15a:	54 f0       	brlt	.+20     	; 0x170 <Battery_charge+0x24>
     15c:	67 39       	cpi	r22, 0x97	; 151
     15e:	71 05       	cpc	r23, r1
     160:	24 f4       	brge	.+8      	; 0x16a <Battery_charge+0x1e>
     162:	29 9a       	sbi	0x05, 1	; 5
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e c0       	rjmp	.+28     	; 0x186 <Battery_charge+0x3a>
     16a:	c7 01       	movw	r24, r14
     16c:	01 97       	sbiw	r24, 0x01	; 1
     16e:	0b c0       	rjmp	.+22     	; 0x186 <Battery_charge+0x3a>
     170:	68 38       	cpi	r22, 0x88	; 136
     172:	73 41       	sbci	r23, 0x13	; 19
     174:	1c f0       	brlt	.+6      	; 0x17c <Battery_charge+0x30>
     176:	c7 01       	movw	r24, r14
     178:	01 97       	sbiw	r24, 0x01	; 1
     17a:	05 c0       	rjmp	.+10     	; 0x186 <Battery_charge+0x3a>
     17c:	b9 01       	movw	r22, r18
     17e:	ca 01       	movw	r24, r20
     180:	a7 01       	movw	r20, r14
     182:	0e 94 5a 00 	call	0xb4	; 0xb4 <MPPT2>
     186:	1f 91       	pop	r17
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <initialise_ADC>:
void delay(uint32_t delaytime){
	for(uint32_t j=0; j < delaytime; j++){for(uint16_t k=0; k < 1770; k++){}}
}

void initialise_ADC(){
	ADMUX &= 0b11011111;
     190:	ec e7       	ldi	r30, 0x7C	; 124
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	80 81       	ld	r24, Z
     196:	8f 7d       	andi	r24, 0xDF	; 223
     198:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //Set REF on AREF pin
     19a:	80 81       	ld	r24, Z
     19c:	80 64       	ori	r24, 0x40	; 64
     19e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0) | (1<<ADIE);
     1a0:	aa e7       	ldi	r26, 0x7A	; 122
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	8c 91       	ld	r24, X
     1a6:	8f 68       	ori	r24, 0x8F	; 143
     1a8:	8c 93       	st	X, r24
	DIDR0 = (1<<ADC0D) | (1<<ADC1D);
     1aa:	83 e0       	ldi	r24, 0x03	; 3
     1ac:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	
	//Start first sample
	ADMUX |=  (1<<MUX0);	
     1b0:	80 81       	ld	r24, Z
     1b2:	81 60       	ori	r24, 0x01	; 1
     1b4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC) | (1<<MUX1); //Start ADC
     1b6:	8c 91       	ld	r24, X
     1b8:	82 64       	ori	r24, 0x42	; 66
     1ba:	8c 93       	st	X, r24
     1bc:	08 95       	ret

000001be <initialise_PWM>:
	* Set Mode 7: Fast PWM (TOP:OCRA, BOTTOM:Reset)
	* Prescaler: 0
	* Clear OCOB on compare, Set OCOB at BOTTOM
	*/
	
	DDRD |= 0b00101000; //Initialise output
     1be:	8a b1       	in	r24, 0x0a	; 10
     1c0:	88 62       	ori	r24, 0x28	; 40
     1c2:	8a b9       	out	0x0a, r24	; 10
	
	//Set timer 1
	TCCR0A = (1<<COM0B1) | (1<<WGM01) | (1<<WGM00);
     1c4:	23 e2       	ldi	r18, 0x23	; 35
     1c6:	24 bd       	out	0x24, r18	; 36
	TCCR0B = (1<<WGM02) | (1<<CS00) ;//| (1<<CS01);
     1c8:	99 e0       	ldi	r25, 0x09	; 9
     1ca:	95 bd       	out	0x25, r25	; 37
	OCR0A = 127;
     1cc:	8f e7       	ldi	r24, 0x7F	; 127
     1ce:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0;
     1d0:	18 bc       	out	0x28, r1	; 40
	
	//Set timer 2
	TCCR2A =  (1<<COM2B1) | (1<<WGM21) | (1<<WGM20);
     1d2:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = (1<<WGM22) | (1<<CS20);
     1d6:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	OCR2A = 127;
     1da:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 0;
     1de:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	
	//sync timers
	TCNT0 = 0;
     1e2:	16 bc       	out	0x26, r1	; 38
	TCNT2 = 6;
     1e4:	86 e0       	ldi	r24, 0x06	; 6
     1e6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
     1ea:	08 95       	ret

000001ec <initialise_led>:
}


void initialise_led(){
	DDRB |= 0x07;
     1ec:	84 b1       	in	r24, 0x04	; 4
     1ee:	87 60       	ori	r24, 0x07	; 7
     1f0:	84 b9       	out	0x04, r24	; 4
	PORTB &= 0b11111000;	//Turn off all lights
     1f2:	85 b1       	in	r24, 0x05	; 5
     1f4:	88 7f       	andi	r24, 0xF8	; 248
     1f6:	85 b9       	out	0x05, r24	; 5
	//PORTB |= 0b00000010;  //Turn on Green led (Start proces)
	
	
	//Initialize counter 1
	TCCR1B |= (1 << CS12) | (1<<CS10) | (1<<WGM12);
     1f8:	e1 e8       	ldi	r30, 0x81	; 129
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	8d 60       	ori	r24, 0x0D	; 13
     200:	80 83       	st	Z, r24
	OCR1A = 3891;
     202:	83 e3       	ldi	r24, 0x33	; 51
     204:	9f e0       	ldi	r25, 0x0F	; 15
     206:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     20a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 |= (1<<OCIE1A);
     20e:	ef e6       	ldi	r30, 0x6F	; 111
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	82 60       	ori	r24, 0x02	; 2
     216:	80 83       	st	Z, r24
     218:	08 95       	ret

0000021a <initialise_input>:
}

void initialise_input(){
	//Input 2s/3s sellect pin (PD4)
	DDRD &=  0b11101111; //PD4 input
     21a:	54 98       	cbi	0x0a, 4	; 10
	PORTD |= 0b00010000; //Pull-up on
     21c:	5c 9a       	sbi	0x0b, 4	; 11
	
	//Input MOSI pin en SCK pin
	PORTB &= 0b11010111;
     21e:	85 b1       	in	r24, 0x05	; 5
     220:	87 7d       	andi	r24, 0xD7	; 215
     222:	85 b9       	out	0x05, r24	; 5
	PORTB |= 0b00101000;
     224:	85 b1       	in	r24, 0x05	; 5
     226:	88 62       	ori	r24, 0x28	; 40
     228:	85 b9       	out	0x05, r24	; 5
     22a:	08 95       	ret

0000022c <initialise_uart>:
}

void initialise_uart(){
	unsigned int ubrr = 16;//BAUD_RATE_230400_BPS;
	UBRR0H = (ubrr>>8);
     22c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (ubrr);
     230:	80 e1       	ldi	r24, 0x10	; 16
     232:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0C = 0x06;       /* Set frame format: 8data, 1stop bit  */
     236:	86 e0       	ldi	r24, 0x06	; 6
     238:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<TXEN0); /* Enable  transmitter                 */
     23c:	88 e0       	ldi	r24, 0x08	; 8
     23e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     242:	08 95       	ret

00000244 <check_bat>:
}

int check_bat(int* Vout, int* cell1, int* cell2){
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	dc 01       	movw	r26, r24
     256:	6a 01       	movw	r12, r20
     258:	84 e6       	ldi	r24, 0x64	; 100
     25a:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t battery_type = 0;
	
	for(uint16_t i=0; i < 100; i++){
		for(uint32_t j=0; j < 100; j++){for(uint16_t k=0; k < 1770; k++){}}
		PORTB ^= 0b00000010;
     25c:	42 e0       	ldi	r20, 0x02	; 2
     25e:	0f c0       	rjmp	.+30     	; 0x27e <check_bat+0x3a>
     260:	21 50       	subi	r18, 0x01	; 1
     262:	31 09       	sbc	r19, r1

int check_bat(int* Vout, int* cell1, int* cell2){
	uint8_t battery_type = 0;
	
	for(uint16_t i=0; i < 100; i++){
		for(uint32_t j=0; j < 100; j++){for(uint16_t k=0; k < 1770; k++){}}
     264:	e9 f7       	brne	.-6      	; 0x260 <check_bat+0x1c>
     266:	31 96       	adiw	r30, 0x01	; 1
     268:	e4 36       	cpi	r30, 0x64	; 100
     26a:	f1 05       	cpc	r31, r1
     26c:	19 f0       	breq	.+6      	; 0x274 <check_bat+0x30>
	
	UCSR0C = 0x06;       /* Set frame format: 8data, 1stop bit  */
	UCSR0B = (1<<TXEN0); /* Enable  transmitter                 */
}

int check_bat(int* Vout, int* cell1, int* cell2){
     26e:	2a ee       	ldi	r18, 0xEA	; 234
     270:	36 e0       	ldi	r19, 0x06	; 6
     272:	f6 cf       	rjmp	.-20     	; 0x260 <check_bat+0x1c>
	uint8_t battery_type = 0;
	
	for(uint16_t i=0; i < 100; i++){
		for(uint32_t j=0; j < 100; j++){for(uint16_t k=0; k < 1770; k++){}}
		PORTB ^= 0b00000010;
     274:	25 b1       	in	r18, 0x05	; 5
     276:	24 27       	eor	r18, r20
     278:	25 b9       	out	0x05, r18	; 5
     27a:	01 97       	sbiw	r24, 0x01	; 1
}

int check_bat(int* Vout, int* cell1, int* cell2){
	uint8_t battery_type = 0;
	
	for(uint16_t i=0; i < 100; i++){
     27c:	99 f0       	breq	.+38     	; 0x2a4 <check_bat+0x60>
	
	UCSR0C = 0x06;       /* Set frame format: 8data, 1stop bit  */
	UCSR0B = (1<<TXEN0); /* Enable  transmitter                 */
}

int check_bat(int* Vout, int* cell1, int* cell2){
     27e:	e0 e0       	ldi	r30, 0x00	; 0
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	f5 cf       	rjmp	.-22     	; 0x26e <check_bat+0x2a>
		for(uint32_t j=0; j < 100; j++){for(uint16_t k=0; k < 1770; k++){}}
		PORTB ^= 0b00000010;
	}
	
	while(*Vout <= 5000){		//Check if battery is higher then 5V
		PORTB ^= 0b00000010;
     284:	85 b1       	in	r24, 0x05	; 5
     286:	84 27       	eor	r24, r20
     288:	85 b9       	out	0x05, r24	; 5
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	07 c0       	rjmp	.+14     	; 0x29e <check_bat+0x5a>
     290:	21 50       	subi	r18, 0x01	; 1
     292:	31 09       	sbc	r19, r1
		for(uint32_t j=0; j < 25; j++){for(uint16_t k=0; k < 1770; k++){}}
     294:	e9 f7       	brne	.-6      	; 0x290 <check_bat+0x4c>
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	89 31       	cpi	r24, 0x19	; 25
     29a:	91 05       	cpc	r25, r1
     29c:	21 f0       	breq	.+8      	; 0x2a6 <check_bat+0x62>
	
	UCSR0C = 0x06;       /* Set frame format: 8data, 1stop bit  */
	UCSR0B = (1<<TXEN0); /* Enable  transmitter                 */
}

int check_bat(int* Vout, int* cell1, int* cell2){
     29e:	2a ee       	ldi	r18, 0xEA	; 234
     2a0:	36 e0       	ldi	r19, 0x06	; 6
     2a2:	f6 cf       	rjmp	.-20     	; 0x290 <check_bat+0x4c>
		for(uint32_t j=0; j < 100; j++){for(uint16_t k=0; k < 1770; k++){}}
		PORTB ^= 0b00000010;
	}
	
	while(*Vout <= 5000){		//Check if battery is higher then 5V
		PORTB ^= 0b00000010;
     2a4:	42 e0       	ldi	r20, 0x02	; 2
	for(uint16_t i=0; i < 100; i++){
		for(uint32_t j=0; j < 100; j++){for(uint16_t k=0; k < 1770; k++){}}
		PORTB ^= 0b00000010;
	}
	
	while(*Vout <= 5000){		//Check if battery is higher then 5V
     2a6:	8d 91       	ld	r24, X+
     2a8:	9c 91       	ld	r25, X
     2aa:	11 97       	sbiw	r26, 0x01	; 1
     2ac:	89 38       	cpi	r24, 0x89	; 137
     2ae:	93 41       	sbci	r25, 0x13	; 19
     2b0:	4c f3       	brlt	.-46     	; 0x284 <check_bat+0x40>
		PORTB ^= 0b00000010;
		for(uint32_t j=0; j < 25; j++){for(uint16_t k=0; k < 1770; k++){}}
	}
	
	PORTB &= 0b11111101;
     2b2:	29 98       	cbi	0x05, 1	; 5
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	08 c0       	rjmp	.+16     	; 0x2ca <check_bat+0x86>
     2ba:	21 50       	subi	r18, 0x01	; 1
     2bc:	31 09       	sbc	r19, r1
	
	for(uint32_t j=0; j < 1000; j++){for(uint16_t k=0; k < 1770; k++){}}
     2be:	e9 f7       	brne	.-6      	; 0x2ba <check_bat+0x76>
     2c0:	01 96       	adiw	r24, 0x01	; 1
     2c2:	88 3e       	cpi	r24, 0xE8	; 232
     2c4:	33 e0       	ldi	r19, 0x03	; 3
     2c6:	93 07       	cpc	r25, r19
     2c8:	19 f0       	breq	.+6      	; 0x2d0 <check_bat+0x8c>
		for(uint32_t j=0; j < 100; j++){for(uint16_t k=0; k < 1770; k++){}}
		PORTB ^= 0b00000010;
	}
	
	while(*Vout <= 5000){		//Check if battery is higher then 5V
		PORTB ^= 0b00000010;
     2ca:	2a ee       	ldi	r18, 0xEA	; 234
     2cc:	36 e0       	ldi	r19, 0x06	; 6
     2ce:	f5 cf       	rjmp	.-22     	; 0x2ba <check_bat+0x76>
	PORTB &= 0b11111101;
	
	for(uint32_t j=0; j < 1000; j++){for(uint16_t k=0; k < 1770; k++){}}
	
	if(!auto_lipo){
		if(!(PIND&0x10)){			//If jumper solderd
     2d0:	4c 99       	sbic	0x09, 4	; 9
     2d2:	09 c0       	rjmp	.+18     	; 0x2e6 <check_bat+0xa2>
			//Selected 3S battery			
			if(*Vout < 9000){
     2d4:	8d 91       	ld	r24, X+
     2d6:	9c 91       	ld	r25, X
     2d8:	88 32       	cpi	r24, 0x28	; 40
     2da:	93 42       	sbci	r25, 0x23	; 35
     2dc:	6c f4       	brge	.+26     	; 0x2f8 <check_bat+0xb4>
				errore(2);
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	0e 94 87 02 	call	0x50e	; 0x50e <errore>
     2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <check_bat+0xa0>
				while(1);			//Safety Wrong battery type
			}
			battery_type = 3;
		}else{
			//Selected 2s battery
			if(*Vout > 9000){
     2e6:	8d 91       	ld	r24, X+
     2e8:	9c 91       	ld	r25, X
     2ea:	89 32       	cpi	r24, 0x29	; 41
     2ec:	93 42       	sbci	r25, 0x23	; 35
     2ee:	34 f0       	brlt	.+12     	; 0x2fc <check_bat+0xb8>
				errore(2);
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	0e 94 87 02 	call	0x50e	; 0x50e <errore>
     2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <check_bat+0xb2>
			//Selected 3S battery			
			if(*Vout < 9000){
				errore(2);
				while(1);			//Safety Wrong battery type
			}
			battery_type = 3;
     2f8:	53 e0       	ldi	r21, 0x03	; 3
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <check_bat+0xba>
			//Selected 2s battery
			if(*Vout > 9000){
				errore(2);
				while(1);			//Safety Wrong battery type
			}
			battery_type = 2;
     2fc:	52 e0       	ldi	r21, 0x02	; 2
		}
	}
	
	uint8_t ballance = 0;
	
	cli();
     2fe:	f8 94       	cli
	for(uint16_t i=0; i < (battery_type*2)+1 ; i++){
     300:	05 2f       	mov	r16, r21
     302:	10 e0       	ldi	r17, 0x00	; 0
     304:	d8 01       	movw	r26, r16
     306:	aa 0f       	add	r26, r26
     308:	bb 1f       	adc	r27, r27
     30a:	11 96       	adiw	r26, 0x01	; 1
     30c:	e0 e0       	ldi	r30, 0x00	; 0
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	90 e0       	ldi	r25, 0x00	; 0
		}else{
			if(*cell1 > 3000 ){
				PORTB ^= 0b00000100;
				ballance = 10;
			}else{
				PORTB ^= 0b00000010;
     312:	68 94       	set
     314:	ee 24       	eor	r14, r14
     316:	e1 f8       	bld	r14, 1
			}else{
				PORTB ^= 0b00000010;
			}
		}else{
			if(*cell1 > 3000 ){
				PORTB ^= 0b00000100;
     318:	68 94       	set
     31a:	ff 24       	eor	r15, r15
     31c:	f2 f8       	bld	r15, 2
				ballance = 10;
     31e:	4a e0       	ldi	r20, 0x0A	; 10
     320:	34 c0       	rjmp	.+104    	; 0x38a <check_bat+0x146>
     322:	21 50       	subi	r18, 0x01	; 1
     324:	31 09       	sbc	r19, r1
	
	uint8_t ballance = 0;
	
	cli();
	for(uint16_t i=0; i < (battery_type*2)+1 ; i++){
		for(uint32_t j=0; j < 500; j++){for(uint16_t k=0; k < 1770; k++){}}	
     326:	e9 f7       	brne	.-6      	; 0x322 <check_bat+0xde>
     328:	21 96       	adiw	r28, 0x01	; 1
     32a:	c4 3f       	cpi	r28, 0xF4	; 244
     32c:	21 e0       	ldi	r18, 0x01	; 1
     32e:	d2 07       	cpc	r29, r18
     330:	19 f0       	breq	.+6      	; 0x338 <check_bat+0xf4>
			//Selected 3S battery			
			if(*Vout < 9000){
				errore(2);
				while(1);			//Safety Wrong battery type
			}
			battery_type = 3;
     332:	2a ee       	ldi	r18, 0xEA	; 234
     334:	36 e0       	ldi	r19, 0x06	; 6
     336:	f5 cf       	rjmp	.-22     	; 0x322 <check_bat+0xde>
	
	cli();
	for(uint16_t i=0; i < (battery_type*2)+1 ; i++){
		for(uint32_t j=0; j < 500; j++){for(uint16_t k=0; k < 1770; k++){}}	
		//PORTB ^= 0b00000010;
		if(battery_type == 3 || battery_type == 13){
     338:	53 30       	cpi	r21, 0x03	; 3
     33a:	a9 f4       	brne	.+42     	; 0x366 <check_bat+0x122>
			if(*cell1 > 3000 && *cell2 >3000){
     33c:	eb 01       	movw	r28, r22
     33e:	28 81       	ld	r18, Y
     340:	39 81       	ldd	r19, Y+1	; 0x01
     342:	29 3b       	cpi	r18, 0xB9	; 185
     344:	3b 40       	sbci	r19, 0x0B	; 11
     346:	5c f0       	brlt	.+22     	; 0x35e <check_bat+0x11a>
     348:	e6 01       	movw	r28, r12
     34a:	28 81       	ld	r18, Y
     34c:	39 81       	ldd	r19, Y+1	; 0x01
     34e:	29 3b       	cpi	r18, 0xB9	; 185
     350:	3b 40       	sbci	r19, 0x0B	; 11
     352:	2c f0       	brlt	.+10     	; 0x35e <check_bat+0x11a>
				PORTB ^= 0b00000100;
     354:	85 b1       	in	r24, 0x05	; 5
     356:	8f 25       	eor	r24, r15
     358:	85 b9       	out	0x05, r24	; 5
				ballance = 10;
     35a:	94 2f       	mov	r25, r20
     35c:	12 c0       	rjmp	.+36     	; 0x382 <check_bat+0x13e>
			}else{
				PORTB ^= 0b00000010;
     35e:	85 b1       	in	r24, 0x05	; 5
     360:	8e 25       	eor	r24, r14
     362:	85 b9       	out	0x05, r24	; 5
     364:	0e c0       	rjmp	.+28     	; 0x382 <check_bat+0x13e>
			}
		}else{
			if(*cell1 > 3000 ){
     366:	eb 01       	movw	r28, r22
     368:	28 81       	ld	r18, Y
     36a:	39 81       	ldd	r19, Y+1	; 0x01
     36c:	29 3b       	cpi	r18, 0xB9	; 185
     36e:	3b 40       	sbci	r19, 0x0B	; 11
     370:	2c f0       	brlt	.+10     	; 0x37c <check_bat+0x138>
				PORTB ^= 0b00000100;
     372:	85 b1       	in	r24, 0x05	; 5
     374:	8f 25       	eor	r24, r15
     376:	85 b9       	out	0x05, r24	; 5
				ballance = 10;
     378:	94 2f       	mov	r25, r20
     37a:	03 c0       	rjmp	.+6      	; 0x382 <check_bat+0x13e>
			}else{
				PORTB ^= 0b00000010;
     37c:	25 b1       	in	r18, 0x05	; 5
     37e:	2e 25       	eor	r18, r14
     380:	25 b9       	out	0x05, r18	; 5
	}
	
	uint8_t ballance = 0;
	
	cli();
	for(uint16_t i=0; i < (battery_type*2)+1 ; i++){
     382:	31 96       	adiw	r30, 0x01	; 1
     384:	ea 17       	cp	r30, r26
     386:	fb 07       	cpc	r31, r27
     388:	18 f4       	brcc	.+6      	; 0x390 <check_bat+0x14c>
			//Selected 3S battery			
			if(*Vout < 9000){
				errore(2);
				while(1);			//Safety Wrong battery type
			}
			battery_type = 3;
     38a:	c0 e0       	ldi	r28, 0x00	; 0
     38c:	d0 e0       	ldi	r29, 0x00	; 0
     38e:	d1 cf       	rjmp	.-94     	; 0x332 <check_bat+0xee>
			}else{
				PORTB ^= 0b00000010;
			}
		}
	}
	sei();
     390:	78 94       	sei
	PORTB &= 0b11111001;
     392:	25 b1       	in	r18, 0x05	; 5
     394:	29 7f       	andi	r18, 0xF9	; 249
     396:	25 b9       	out	0x05, r18	; 5
	
	
	
	
	return battery_type + ballance;
}
     398:	98 01       	movw	r18, r16
     39a:	29 0f       	add	r18, r25
     39c:	31 1d       	adc	r19, r1
     39e:	c9 01       	movw	r24, r18
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	df 90       	pop	r13
     3ae:	cf 90       	pop	r12
     3b0:	08 95       	ret

000003b2 <blink_times>:
     3b2:	9c 01       	movw	r18, r24
     3b4:	ad ec       	ldi	r26, 0xCD	; 205
     3b6:	bc ec       	ldi	r27, 0xCC	; 204
     3b8:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__umulhisi3>
     3bc:	96 95       	lsr	r25
     3be:	87 95       	ror	r24
     3c0:	96 95       	lsr	r25
     3c2:	87 95       	ror	r24
     3c4:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <amounts_blue+0x1>
     3c8:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <amounts_blue>
     3cc:	08 95       	ret

000003ce <blue_state>:
     3ce:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <amounts_blue>
     3d2:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <amounts_blue+0x1>
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <times.1609>
     3de:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <times.1609+0x1>
     3e2:	28 17       	cp	r18, r24
     3e4:	39 07       	cpc	r19, r25
     3e6:	b8 f4       	brcc	.+46     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     3e8:	95 b1       	in	r25, 0x05	; 5
     3ea:	84 e0       	ldi	r24, 0x04	; 4
     3ec:	89 27       	eor	r24, r25
     3ee:	85 b9       	out	0x05, r24	; 5
     3f0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <times.1609>
     3f4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <times.1609+0x1>
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <times.1609+0x1>
     3fe:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <times.1609>
     402:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ready>
     406:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ready+0x1>
     40a:	81 60       	ori	r24, 0x01	; 1
     40c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <ready+0x1>
     410:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <ready>
     414:	08 95       	ret
     416:	2a 98       	cbi	0x05, 2	; 5
     418:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <amounts_blue>
     41c:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <amounts_blue+0x1>
     420:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <times.1609>
     424:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <times.1609+0x1>
     428:	02 96       	adiw	r24, 0x02	; 2
     42a:	88 0f       	add	r24, r24
     42c:	99 1f       	adc	r25, r25
     42e:	28 17       	cp	r18, r24
     430:	39 07       	cpc	r19, r25
     432:	98 f0       	brcs	.+38     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     434:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ready>
     438:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ready+0x1>
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	99 27       	eor	r25, r25
     440:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <ready+0x1>
     444:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <ready>
     448:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ready>
     44c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ready+0x1>
     450:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <times.1609+0x1>
     454:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <times.1609>
     458:	08 95       	ret
     45a:	2f 5f       	subi	r18, 0xFF	; 255
     45c:	3f 4f       	sbci	r19, 0xFF	; 255
     45e:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <times.1609+0x1>
     462:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <times.1609>
     466:	08 95       	ret

00000468 <red_state>:
     468:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <amounts_red>
     46c:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <amounts_red+0x1>
     470:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <times.1612>
     474:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <times.1612+0x1>
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	28 17       	cp	r18, r24
     47e:	39 07       	cpc	r19, r25
     480:	b8 f4       	brcc	.+46     	; 0x4b0 <red_state+0x48>
     482:	95 b1       	in	r25, 0x05	; 5
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	89 27       	eor	r24, r25
     488:	85 b9       	out	0x05, r24	; 5
     48a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <times.1612>
     48e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <times.1612+0x1>
     492:	01 96       	adiw	r24, 0x01	; 1
     494:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <times.1612+0x1>
     498:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <times.1612>
     49c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ready>
     4a0:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ready+0x1>
     4a4:	82 60       	ori	r24, 0x02	; 2
     4a6:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <ready+0x1>
     4aa:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <ready>
     4ae:	08 95       	ret
     4b0:	2f 5f       	subi	r18, 0xFF	; 255
     4b2:	3f 4f       	sbci	r19, 0xFF	; 255
     4b4:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <times.1612+0x1>
     4b8:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <times.1612>
     4bc:	28 98       	cbi	0x05, 0	; 5
     4be:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <amounts_red>
     4c2:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <amounts_red+0x1>
     4c6:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <times.1612>
     4ca:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <times.1612+0x1>
     4ce:	02 96       	adiw	r24, 0x02	; 2
     4d0:	88 0f       	add	r24, r24
     4d2:	99 1f       	adc	r25, r25
     4d4:	28 17       	cp	r18, r24
     4d6:	39 07       	cpc	r19, r25
     4d8:	98 f0       	brcs	.+38     	; 0x500 <red_state+0x98>
     4da:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ready>
     4de:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ready+0x1>
     4e2:	8d 7f       	andi	r24, 0xFD	; 253
     4e4:	99 27       	eor	r25, r25
     4e6:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <ready+0x1>
     4ea:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <ready>
     4ee:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ready>
     4f2:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ready+0x1>
     4f6:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <times.1612+0x1>
     4fa:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <times.1612>
     4fe:	08 95       	ret
     500:	2f 5f       	subi	r18, 0xFF	; 255
     502:	3f 4f       	sbci	r19, 0xFF	; 255
     504:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <times.1612+0x1>
     508:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <times.1612>
     50c:	08 95       	ret

0000050e <errore>:
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	87 30       	cpi	r24, 0x07	; 7
     512:	91 05       	cpc	r25, r1
     514:	08 f0       	brcs	.+2      	; 0x518 <errore+0xa>
     516:	4a c0       	rjmp	.+148    	; 0x5ac <errore+0x9e>
     518:	fc 01       	movw	r30, r24
     51a:	ec 5c       	subi	r30, 0xCC	; 204
     51c:	ff 4f       	sbci	r31, 0xFF	; 255
     51e:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__tablejump2__>
     522:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <error_register.1616>
     526:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <error_register.1616+0x1>
     52a:	8e 7f       	andi	r24, 0xFE	; 254
     52c:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <error_register.1616+0x1>
     530:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <error_register.1616>
     534:	3b c0       	rjmp	.+118    	; 0x5ac <errore+0x9e>
     536:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <error_register.1616>
     53a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <error_register.1616+0x1>
     53e:	81 60       	ori	r24, 0x01	; 1
     540:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <error_register.1616+0x1>
     544:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <error_register.1616>
     548:	31 c0       	rjmp	.+98     	; 0x5ac <errore+0x9e>
     54a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <error_register.1616>
     54e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <error_register.1616+0x1>
     552:	82 60       	ori	r24, 0x02	; 2
     554:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <error_register.1616+0x1>
     558:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <error_register.1616>
     55c:	27 c0       	rjmp	.+78     	; 0x5ac <errore+0x9e>
     55e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <error_register.1616>
     562:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <error_register.1616+0x1>
     566:	84 60       	ori	r24, 0x04	; 4
     568:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <error_register.1616+0x1>
     56c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <error_register.1616>
     570:	1d c0       	rjmp	.+58     	; 0x5ac <errore+0x9e>
     572:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <error_register.1616>
     576:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <error_register.1616+0x1>
     57a:	88 60       	ori	r24, 0x08	; 8
     57c:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <error_register.1616+0x1>
     580:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <error_register.1616>
     584:	13 c0       	rjmp	.+38     	; 0x5ac <errore+0x9e>
     586:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <error_register.1616>
     58a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <error_register.1616+0x1>
     58e:	80 61       	ori	r24, 0x10	; 16
     590:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <error_register.1616+0x1>
     594:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <error_register.1616>
     598:	09 c0       	rjmp	.+18     	; 0x5ac <errore+0x9e>
     59a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <error_register.1616>
     59e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <error_register.1616+0x1>
     5a2:	80 62       	ori	r24, 0x20	; 32
     5a4:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <error_register.1616+0x1>
     5a8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <error_register.1616>
     5ac:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <error_register.1616>
     5b0:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <error_register.1616+0x1>
     5b4:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <amounts_red+0x1>
     5b8:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <amounts_red>
     5bc:	08 95       	ret

000005be <__vector_11>:
	}
}// main


// timer voor led (naar led librari)
ISR(TIMER1_COMPA_vect){
     5be:	1f 92       	push	r1
     5c0:	0f 92       	push	r0
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	0f 92       	push	r0
     5c6:	11 24       	eor	r1, r1
     5c8:	2f 93       	push	r18
     5ca:	3f 93       	push	r19
     5cc:	4f 93       	push	r20
     5ce:	5f 93       	push	r21
     5d0:	6f 93       	push	r22
     5d2:	7f 93       	push	r23
     5d4:	8f 93       	push	r24
     5d6:	9f 93       	push	r25
     5d8:	af 93       	push	r26
     5da:	bf 93       	push	r27
     5dc:	ef 93       	push	r30
     5de:	ff 93       	push	r31
	blue_state();
     5e0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <blue_state>
	red_state();
     5e4:	0e 94 34 02 	call	0x468	; 0x468 <red_state>
	OCR1A = 3891;
     5e8:	83 e3       	ldi	r24, 0x33	; 51
     5ea:	9f e0       	ldi	r25, 0x0F	; 15
     5ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     5f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	cell_counter++;		//Counter for start measuring cells
     5f4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <cell_counter>
     5f8:	8f 5f       	subi	r24, 0xFF	; 255
     5fa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cell_counter>
}
     5fe:	ff 91       	pop	r31
     600:	ef 91       	pop	r30
     602:	bf 91       	pop	r27
     604:	af 91       	pop	r26
     606:	9f 91       	pop	r25
     608:	8f 91       	pop	r24
     60a:	7f 91       	pop	r23
     60c:	6f 91       	pop	r22
     60e:	5f 91       	pop	r21
     610:	4f 91       	pop	r20
     612:	3f 91       	pop	r19
     614:	2f 91       	pop	r18
     616:	0f 90       	pop	r0
     618:	0f be       	out	0x3f, r0	; 63
     61a:	0f 90       	pop	r0
     61c:	1f 90       	pop	r1
     61e:	18 95       	reti

00000620 <uartprint>:
		eeprom_write_byte(7, call_cell2);
		while(1){PORTB |= 0b00000001;}
	}
}
// werkt maar is niet optimaal (debugger niet nodig voor final product)
void uartprint(int input){
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	cd b7       	in	r28, 0x3d	; 61
     626:	de b7       	in	r29, 0x3e	; 62
     628:	68 97       	sbiw	r28, 0x18	; 24
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	de bf       	out	0x3e, r29	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	cd bf       	out	0x3d, r28	; 61
	unsigned char data[] = "Hello from ATmega328p  "; //Data buffer with random text
     634:	28 e1       	ldi	r18, 0x18	; 24
     636:	e7 e0       	ldi	r30, 0x07	; 7
     638:	f1 e0       	ldi	r31, 0x01	; 1
     63a:	de 01       	movw	r26, r28
     63c:	11 96       	adiw	r26, 0x01	; 1
     63e:	01 90       	ld	r0, Z+
     640:	0d 92       	st	X+, r0
     642:	2a 95       	dec	r18
     644:	e1 f7       	brne	.-8      	; 0x63e <uartprint+0x1e>
	itoa(input, data, 10); //Convert value to ascii
     646:	4a e0       	ldi	r20, 0x0A	; 10
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	be 01       	movw	r22, r28
     64c:	6f 5f       	subi	r22, 0xFF	; 255
     64e:	7f 4f       	sbci	r23, 0xFF	; 255
     650:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <itoa>
	uint8_t i = 0;
	while(data[i] != 0) /* print the String   */
     654:	99 81       	ldd	r25, Y+1	; 0x01
     656:	99 23       	and	r25, r25
     658:	a1 f0       	breq	.+40     	; 0x682 <uartprint+0x62>
     65a:	20 e0       	ldi	r18, 0x00	; 0
	{
		while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer*/
     65c:	e0 ec       	ldi	r30, 0xC0	; 192
     65e:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = data[i];            /* Put data into buffer, sends the data */
     660:	46 ec       	ldi	r20, 0xC6	; 198
     662:	50 e0       	ldi	r21, 0x00	; 0
	unsigned char data[] = "Hello from ATmega328p  "; //Data buffer with random text
	itoa(input, data, 10); //Convert value to ascii
	uint8_t i = 0;
	while(data[i] != 0) /* print the String   */
	{
		while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer*/
     664:	80 81       	ld	r24, Z
     666:	85 ff       	sbrs	r24, 5
     668:	fd cf       	rjmp	.-6      	; 0x664 <uartprint+0x44>
		UDR0 = data[i];            /* Put data into buffer, sends the data */
     66a:	da 01       	movw	r26, r20
     66c:	9c 93       	st	X, r25
		i++;                             /* increment counter           */
     66e:	2f 5f       	subi	r18, 0xFF	; 255
// werkt maar is niet optimaal (debugger niet nodig voor final product)
void uartprint(int input){
	unsigned char data[] = "Hello from ATmega328p  "; //Data buffer with random text
	itoa(input, data, 10); //Convert value to ascii
	uint8_t i = 0;
	while(data[i] != 0) /* print the String   */
     670:	a1 e0       	ldi	r26, 0x01	; 1
     672:	b0 e0       	ldi	r27, 0x00	; 0
     674:	ac 0f       	add	r26, r28
     676:	bd 1f       	adc	r27, r29
     678:	a2 0f       	add	r26, r18
     67a:	b1 1d       	adc	r27, r1
     67c:	9c 91       	ld	r25, X
     67e:	91 11       	cpse	r25, r1
     680:	f1 cf       	rjmp	.-30     	; 0x664 <uartprint+0x44>
		while (!( UCSR0A & (1<<UDRE0))); /* Wait for empty transmit buffer*/
		UDR0 = data[i];            /* Put data into buffer, sends the data */
		i++;                             /* increment counter           */
	}
	
	while (!( UCSR0A & (1<<UDRE0)));
     682:	e0 ec       	ldi	r30, 0xC0	; 192
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	80 81       	ld	r24, Z
     688:	85 ff       	sbrs	r24, 5
     68a:	fd cf       	rjmp	.-6      	; 0x686 <uartprint+0x66>
	UDR0 = 9;
     68c:	89 e0       	ldi	r24, 0x09	; 9
     68e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
     692:	68 96       	adiw	r28, 0x18	; 24
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	de bf       	out	0x3e, r29	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	cd bf       	out	0x3d, r28	; 61
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <uartprintln>:
// werkt maar is niet optimaal (debugger niet nodig voor final product)
void uartprintln(int input){
	uartprint(input);					//Print actual data
     6a4:	0e 94 10 03 	call	0x620	; 0x620 <uartprint>
	
	while (!( UCSR0A & (1<<UDRE0))); 
     6a8:	e0 ec       	ldi	r30, 0xC0	; 192
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	80 81       	ld	r24, Z
     6ae:	85 ff       	sbrs	r24, 5
     6b0:	fd cf       	rjmp	.-6      	; 0x6ac <uartprintln+0x8>
	UDR0 = 10;							//Print enter
     6b2:	8a e0       	ldi	r24, 0x0A	; 10
     6b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     6b8:	08 95       	ret

000006ba <__vector_21>:
	OCR1A = 3891;
	
	cell_counter++;		//Counter for start measuring cells
}
// adc optimaliseren maar werkt (main)
ISR(ADC_vect){ 
     6ba:	1f 92       	push	r1
     6bc:	0f 92       	push	r0
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	0f 92       	push	r0
     6c2:	11 24       	eor	r1, r1
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
     6c8:	2f 93       	push	r18
     6ca:	3f 93       	push	r19
     6cc:	4f 93       	push	r20
     6ce:	5f 93       	push	r21
     6d0:	6f 93       	push	r22
     6d2:	7f 93       	push	r23
     6d4:	8f 93       	push	r24
     6d6:	9f 93       	push	r25
     6d8:	af 93       	push	r26
     6da:	bf 93       	push	r27
     6dc:	ef 93       	push	r30
     6de:	ff 93       	push	r31
	if(ADC >= 1020 && !(ADMUX == 0b01000001)){	//Safety emergancy stop if value becomes to high
     6e0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     6e4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     6e8:	8c 3f       	cpi	r24, 0xFC	; 252
     6ea:	93 40       	sbci	r25, 0x03	; 3
     6ec:	80 f0       	brcs	.+32     	; 0x70e <__vector_21+0x54>
     6ee:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     6f2:	81 34       	cpi	r24, 0x41	; 65
     6f4:	61 f0       	breq	.+24     	; 0x70e <__vector_21+0x54>
		//stop = 1;		//Exit main loop
		errore(5);		//Log errore	
     6f6:	85 e0       	ldi	r24, 0x05	; 5
     6f8:	0e 94 87 02 	call	0x50e	; 0x50e <errore>
		OCR0B = 0;		//Counter off
     6fc:	18 bc       	out	0x28, r1	; 40
		OCR2B = 0;		//Counter off
     6fe:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		uartprintln(ADMUX);
     702:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 52 03 	call	0x6a4	; 0x6a4 <uartprintln>
     70c:	0e c1       	rjmp	.+540    	; 0x92a <__stack+0x2b>
		}else{
		
		//Interrupt
		switch(ADMUX){				//Switch to next ADC
     70e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     712:	82 34       	cpi	r24, 0x42	; 66
     714:	79 f0       	breq	.+30     	; 0x734 <__vector_21+0x7a>
     716:	38 f4       	brcc	.+14     	; 0x726 <__vector_21+0x6c>
     718:	80 34       	cpi	r24, 0x40	; 64
     71a:	09 f4       	brne	.+2      	; 0x71e <__vector_21+0x64>
     71c:	7a c0       	rjmp	.+244    	; 0x812 <__vector_21+0x158>
     71e:	81 34       	cpi	r24, 0x41	; 65
     720:	09 f4       	brne	.+2      	; 0x724 <__vector_21+0x6a>
     722:	b5 c0       	rjmp	.+362    	; 0x88e <__vector_21+0x1d4>
     724:	ec c0       	rjmp	.+472    	; 0x8fe <__vector_21+0x244>
     726:	84 34       	cpi	r24, 0x44	; 68
     728:	f1 f1       	breq	.+124    	; 0x7a6 <__vector_21+0xec>
     72a:	30 f1       	brcs	.+76     	; 0x778 <__vector_21+0xbe>
     72c:	85 34       	cpi	r24, 0x45	; 69
     72e:	09 f4       	brne	.+2      	; 0x732 <__vector_21+0x78>
     730:	52 c0       	rjmp	.+164    	; 0x7d6 <__vector_21+0x11c>
     732:	e5 c0       	rjmp	.+458    	; 0x8fe <__vector_21+0x244>
			case 0b01000010:								//Select PC2 - Vout//float temp = (float)call_Vout;
				;
				uint32_t temp_vout = ADC;
     734:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     738:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
				temp_vout = ((temp_vout * call_Vout)/10);
     73c:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <call_Vout>
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__umulhisi3>
				Vout = temp_vout;							//Calc Vout to mili volts
     746:	2a e0       	ldi	r18, 0x0A	; 10
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	40 e0       	ldi	r20, 0x00	; 0
     74c:	50 e0       	ldi	r21, 0x00	; 0
     74e:	0e 94 a9 09 	call	0x1352	; 0x1352 <__udivmodsi4>
     752:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <Vout+0x1>
     756:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <Vout>
				if(Vout >= 13000){
     75a:	28 3c       	cpi	r18, 0xC8	; 200
     75c:	32 43       	sbci	r19, 0x32	; 50
     75e:	44 f0       	brlt	.+16     	; 0x770 <__vector_21+0xb6>
					OCR2B=0;
     760:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
					duty = 100;
     764:	84 e6       	ldi	r24, 0x64	; 100
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <duty+0x1>
     76c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <duty>
				}
				ADMUX = (1<<REFS0) | (1<<MUX1) | (1<<MUX0); //goto PC3
     770:	83 e4       	ldi	r24, 0x43	; 67
     772:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
				
				break;
     776:	cb c0       	rjmp	.+406    	; 0x90e <__stack+0xf>
			case 0b01000011:								//Select PC3 - Vin
			;
				uint32_t temp_Vin = ADC;
     778:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     77c:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
				temp_Vin = ((temp_Vin * call_Vin)/10);
     780:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <call_Vin>
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__umulhisi3>
				Vin = temp_Vin;							//Calc Vin to mili volts
     78a:	2a e0       	ldi	r18, 0x0A	; 10
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	0e 94 a9 09 	call	0x1352	; 0x1352 <__udivmodsi4>
     796:	30 93 38 01 	sts	0x0138, r19	; 0x800138 <Vin+0x1>
     79a:	20 93 37 01 	sts	0x0137, r18	; 0x800137 <Vin>
				ADMUX = (1<<REFS0) | (1<<MUX2);				//goto PC4
     79e:	84 e4       	ldi	r24, 0x44	; 68
     7a0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
				
				break;
     7a4:	b4 c0       	rjmp	.+360    	; 0x90e <__stack+0xf>
			case 0b01000100:								//Select PC4 - Iout
				Iout = ADC * 7.8;
     7a6:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     7aa:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 9a 08 	call	0x1134	; 0x1134 <__floatunsisf>
     7b6:	2a e9       	ldi	r18, 0x9A	; 154
     7b8:	39 e9       	ldi	r19, 0x99	; 153
     7ba:	49 ef       	ldi	r20, 0xF9	; 249
     7bc:	50 e4       	ldi	r21, 0x40	; 64
     7be:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulsf3>
     7c2:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fixsfsi>
     7c6:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <Iout+0x1>
     7ca:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <Iout>
				ADMUX = (1<<REFS0) | (1<<MUX2) | (1<<MUX0);	//goto PC5
     7ce:	85 e4       	ldi	r24, 0x45	; 69
     7d0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
				break;
     7d4:	9c c0       	rjmp	.+312    	; 0x90e <__stack+0xf>
			case 0b01000101:								//Select PC5 - Iin
				Iin = ADC * 8.517/100;
     7d6:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     7da:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 9a 08 	call	0x1134	; 0x1134 <__floatunsisf>
     7e6:	22 ea       	ldi	r18, 0xA2	; 162
     7e8:	35 e4       	ldi	r19, 0x45	; 69
     7ea:	48 e0       	ldi	r20, 0x08	; 8
     7ec:	51 e4       	ldi	r21, 0x41	; 65
     7ee:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulsf3>
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	48 ec       	ldi	r20, 0xC8	; 200
     7f8:	52 e4       	ldi	r21, 0x42	; 66
     7fa:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__divsf3>
     7fe:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fixsfsi>
     802:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <Iin+0x1>
     806:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <Iin>
				ADMUX = (1<<REFS0) | (1<<MUX1);				//goto PC2
     80a:	82 e4       	ldi	r24, 0x42	; 66
     80c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
				
				break;
     810:	7e c0       	rjmp	.+252    	; 0x90e <__stack+0xf>
			case 0b01000000:								//Select cell1
				ADMUX = (1<<REFS0) | (1<<MUX1);				//goto PC1
     812:	82 e4       	ldi	r24, 0x42	; 66
     814:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
				uint32_t temp_cell2 = ADC ;
     818:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     81c:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
				temp_cell2 = ((temp_cell2 * call_cell2)/10) - cell1;
     820:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <call_cell2>
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__umulhisi3>
     82a:	2a e0       	ldi	r18, 0x0A	; 10
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	40 e0       	ldi	r20, 0x00	; 0
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	0e 94 a9 09 	call	0x1352	; 0x1352 <__udivmodsi4>
     836:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <cell1>
     83a:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <cell1+0x1>
				cell2 = temp_cell2;
     83e:	cb 01       	movw	r24, r22
     840:	07 2e       	mov	r0, r23
     842:	00 0c       	add	r0, r0
     844:	aa 0b       	sbc	r26, r26
     846:	bb 0b       	sbc	r27, r27
     848:	89 01       	movw	r16, r18
     84a:	9a 01       	movw	r18, r20
     84c:	08 1b       	sub	r16, r24
     84e:	19 0b       	sbc	r17, r25
     850:	2a 0b       	sbc	r18, r26
     852:	3b 0b       	sbc	r19, r27
     854:	c8 01       	movw	r24, r16
				if(cell2 < 0) cell2 = 0;
     856:	99 23       	and	r25, r25
     858:	2c f0       	brlt	.+10     	; 0x864 <__vector_21+0x1aa>
				break;
			case 0b01000000:								//Select cell1
				ADMUX = (1<<REFS0) | (1<<MUX1);				//goto PC1
				uint32_t temp_cell2 = ADC ;
				temp_cell2 = ((temp_cell2 * call_cell2)/10) - cell1;
				cell2 = temp_cell2;
     85a:	10 93 32 01 	sts	0x0132, r17	; 0x800132 <cell2+0x1>
     85e:	00 93 31 01 	sts	0x0131, r16	; 0x800131 <cell2>
     862:	04 c0       	rjmp	.+8      	; 0x86c <__vector_21+0x1b2>
				if(cell2 < 0) cell2 = 0;
     864:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <cell2+0x1>
     868:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <cell2>
				cell3 = Vout - cell1 - cell2;
     86c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <Vout>
     870:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Vout+0x1>
     874:	86 1b       	sub	r24, r22
     876:	97 0b       	sbc	r25, r23
     878:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <cell2>
     87c:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <cell2+0x1>
     880:	82 1b       	sub	r24, r18
     882:	93 0b       	sbc	r25, r19
     884:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <cell3+0x1>
     888:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <cell3>
				break;
     88c:	40 c0       	rjmp	.+128    	; 0x90e <__stack+0xf>
			case 0b01000001:								//Select cell1
				cell1 =  (ADC * call_cell1) / 10;
     88e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     892:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     896:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <call_cell1>
     89a:	48 9f       	mul	r20, r24
     89c:	90 01       	movw	r18, r0
     89e:	49 9f       	mul	r20, r25
     8a0:	30 0d       	add	r19, r0
     8a2:	11 24       	eor	r1, r1
     8a4:	ad ec       	ldi	r26, 0xCD	; 205
     8a6:	bc ec       	ldi	r27, 0xCC	; 204
     8a8:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__umulhisi3>
     8ac:	96 95       	lsr	r25
     8ae:	87 95       	ror	r24
     8b0:	96 95       	lsr	r25
     8b2:	87 95       	ror	r24
     8b4:	96 95       	lsr	r25
     8b6:	87 95       	ror	r24
     8b8:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <cell1+0x1>
     8bc:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <cell1>
				
				if((max_voltage/cell_max_voltage) == 3){ // 3s
     8c0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <max_voltage>
     8c4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <max_voltage+0x1>
     8c8:	8c 50       	subi	r24, 0x0C	; 12
     8ca:	90 43       	sbci	r25, 0x30	; 48
     8cc:	84 30       	cpi	r24, 0x04	; 4
     8ce:	90 41       	sbci	r25, 0x10	; 16
     8d0:	20 f4       	brcc	.+8      	; 0x8da <__vector_21+0x220>
					ADMUX = (1<<REFS0);							//goto PC2
     8d2:	80 e4       	ldi	r24, 0x40	; 64
     8d4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     8d8:	1a c0       	rjmp	.+52     	; 0x90e <__stack+0xf>
				}else{ // 2s
					ADMUX = (1<<REFS0) | (1<<MUX1);				//goto PC1
     8da:	82 e4       	ldi	r24, 0x42	; 66
     8dc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
					cell2 = Vout - cell1;
     8e0:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <Vout>
     8e4:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Vout+0x1>
     8e8:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <cell1>
     8ec:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <cell1+0x1>
     8f0:	82 1b       	sub	r24, r18
     8f2:	93 0b       	sbc	r25, r19
     8f4:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <cell2+0x1>
     8f8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <cell2>
     8fc:	08 c0       	rjmp	.+16     	; 0x90e <__stack+0xf>
				}
				
				//uartprintln(ADC);
				break;
			default:
				ADMUX |= (1<<REFS0) | (1<<MUX2) | (1<<MUX0);//If no case found goto PC2
     8fe:	ec e7       	ldi	r30, 0x7C	; 124
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	85 64       	ori	r24, 0x45	; 69
     906:	80 83       	st	Z, r24
				errore(4);									//Make error register 1
     908:	84 e0       	ldi	r24, 0x04	; 4
     90a:	0e 94 87 02 	call	0x50e	; 0x50e <errore>
				break;
		}
		
		if(cell_counter >= 20){	//if statement for starting cell measurement
     90e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <cell_counter>
     912:	84 31       	cpi	r24, 0x14	; 20
     914:	28 f0       	brcs	.+10     	; 0x920 <__stack+0x21>
			ADMUX = 0b01000001;
     916:	81 e4       	ldi	r24, 0x41	; 65
     918:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
			cell_counter = 0;
     91c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <cell_counter>
		}
		
		
		ADCSRA |= 1<<ADSC; //Start ADC
     920:	ea e7       	ldi	r30, 0x7A	; 122
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 81       	ld	r24, Z
     926:	80 64       	ori	r24, 0x40	; 64
     928:	80 83       	st	Z, r24
	}
}
     92a:	ff 91       	pop	r31
     92c:	ef 91       	pop	r30
     92e:	bf 91       	pop	r27
     930:	af 91       	pop	r26
     932:	9f 91       	pop	r25
     934:	8f 91       	pop	r24
     936:	7f 91       	pop	r23
     938:	6f 91       	pop	r22
     93a:	5f 91       	pop	r21
     93c:	4f 91       	pop	r20
     93e:	3f 91       	pop	r19
     940:	2f 91       	pop	r18
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	0f 90       	pop	r0
     948:	0f be       	out	0x3f, r0	; 63
     94a:	0f 90       	pop	r0
     94c:	1f 90       	pop	r1
     94e:	18 95       	reti

00000950 <call_input>:
// calibrate (onbepaalt)
void call_input(){
     950:	cf 92       	push	r12
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
	//Calibration for input and output
	if(!(PINB&0x08)){
     960:	1b 99       	sbic	0x03, 3	; 3
     962:	7d c0       	rjmp	.+250    	; 0xa5e <call_input+0x10e>
		sei();
     964:	78 94       	sei
		
		PORTB |= 0b00000010;
     966:	29 9a       	sbi	0x05, 1	; 5
		call_Vout = 50;
     968:	82 e3       	ldi	r24, 0x32	; 50
     96a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <call_Vout>
		call_Vin = 0;
     96e:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <call_Vin>
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	3a ef       	ldi	r19, 0xFA	; 250
     976:	06 c0       	rjmp	.+12     	; 0x984 <call_input+0x34>
     978:	01 97       	sbiw	r24, 0x01	; 1
		
		for(uint16_t k=0; k < 64000; k++){for(uint16_t l=0; l < 20; l++){}} //wait
     97a:	f1 f7       	brne	.-4      	; 0x978 <call_input+0x28>
     97c:	21 50       	subi	r18, 0x01	; 1
     97e:	31 09       	sbc	r19, r1
     980:	09 f4       	brne	.+2      	; 0x984 <call_input+0x34>
     982:	43 c0       	rjmp	.+134    	; 0xa0a <call_input+0xba>
		
		ADCSRA |= 1<<ADSC; //Start ADC
	}
}
// calibrate (onbepaalt)
void call_input(){
     984:	84 e1       	ldi	r24, 0x14	; 20
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	f7 cf       	rjmp	.-18     	; 0x978 <call_input+0x28>
		int last_Vout;
		
		while(Vout < 10000 || Vin < 10000){
			
			if(Vout < 10000){
				call_Vout ++;
     98a:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <call_Vout>
     98e:	2f 5f       	subi	r18, 0xFF	; 255
     990:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <call_Vout>
			}else{
			if((last_Vout-10000) > (Vout-10000)){
				call_Vout --;
			}
		}
			if(Vin < 10000)call_Vin ++;
     994:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <Vin>
     998:	30 91 38 01 	lds	r19, 0x0138	; 0x800138 <Vin+0x1>
     99c:	20 31       	cpi	r18, 0x10	; 16
     99e:	37 42       	sbci	r19, 0x27	; 39
     9a0:	8c f0       	brlt	.+34     	; 0x9c4 <call_input+0x74>
		
		while(Vout < 10000 || Vin < 10000){
			
			if(Vout < 10000){
				call_Vout ++;
				last_Vout = Vout;
     9a2:	8c 01       	movw	r16, r24
     9a4:	15 c0       	rjmp	.+42     	; 0x9d0 <call_input+0x80>
			}else{
			if((last_Vout-10000) > (Vout-10000)){
     9a6:	ac 01       	movw	r20, r24
     9a8:	40 51       	subi	r20, 0x10	; 16
     9aa:	57 42       	sbci	r21, 0x27	; 39
     9ac:	98 01       	movw	r18, r16
     9ae:	20 51       	subi	r18, 0x10	; 16
     9b0:	37 42       	sbci	r19, 0x27	; 39
     9b2:	42 17       	cp	r20, r18
     9b4:	53 07       	cpc	r21, r19
     9b6:	3c f4       	brge	.+14     	; 0x9c6 <call_input+0x76>
				call_Vout --;
     9b8:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <call_Vout>
     9bc:	21 50       	subi	r18, 0x01	; 1
     9be:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <call_Vout>
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <call_input+0x76>
		
		while(Vout < 10000 || Vin < 10000){
			
			if(Vout < 10000){
				call_Vout ++;
				last_Vout = Vout;
     9c4:	8c 01       	movw	r16, r24
			}else{
			if((last_Vout-10000) > (Vout-10000)){
				call_Vout --;
			}
		}
			if(Vin < 10000)call_Vin ++;
     9c6:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <call_Vin>
     9ca:	2f 5f       	subi	r18, 0xFF	; 255
     9cc:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <call_Vin>
		
		while(Vout < 10000 || Vin < 10000){
			
			if(Vout < 10000){
				call_Vout ++;
				last_Vout = Vout;
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	3a ef       	ldi	r19, 0xFA	; 250
     9d4:	21 50       	subi	r18, 0x01	; 1
     9d6:	31 09       	sbc	r19, r1
			}
		}
			if(Vin < 10000)call_Vin ++;
			
			
			for(uint16_t k=0; k < 64000; k++){for(uint16_t l=0; l < 10; l++){}}
     9d8:	e9 f7       	brne	.-6      	; 0x9d4 <call_input+0x84>
			
			
			uartprint(Vout);
     9da:	0e 94 10 03 	call	0x620	; 0x620 <uartprint>
			uartprint(call_Vout);
     9de:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <call_Vout>
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 10 03 	call	0x620	; 0x620 <uartprint>
			
			uartprint(Vin);
     9e8:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <Vin>
     9ec:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <Vin+0x1>
     9f0:	0e 94 10 03 	call	0x620	; 0x620 <uartprint>
			uartprintln(call_Vin);
     9f4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <call_Vin>
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 52 03 	call	0x6a4	; 0x6a4 <uartprintln>
			
			while (!( UCSR0A & (1<<UDRE0)));
     9fe:	88 81       	ld	r24, Y
     a00:	85 ff       	sbrs	r24, 5
     a02:	fd cf       	rjmp	.-6      	; 0x9fe <call_input+0xae>
			UDR0 = 10;
     a04:	f7 01       	movw	r30, r14
     a06:	d0 82       	st	Z, r13
     a08:	0b c0       	rjmp	.+22     	; 0xa20 <call_input+0xd0>
			uartprint(call_Vout);
			
			uartprint(Vin);
			uartprintln(call_Vin);
			
			while (!( UCSR0A & (1<<UDRE0)));
     a0a:	c0 ec       	ldi	r28, 0xC0	; 192
     a0c:	d0 e0       	ldi	r29, 0x00	; 0
			UDR0 = 10;
     a0e:	0f 2e       	mov	r0, r31
     a10:	f6 ec       	ldi	r31, 0xC6	; 198
     a12:	ef 2e       	mov	r14, r31
     a14:	f1 2c       	mov	r15, r1
     a16:	f0 2d       	mov	r31, r0
     a18:	0f 2e       	mov	r0, r31
     a1a:	fa e0       	ldi	r31, 0x0A	; 10
     a1c:	df 2e       	mov	r13, r31
     a1e:	f0 2d       	mov	r31, r0
		
		for(uint16_t k=0; k < 64000; k++){for(uint16_t l=0; l < 20; l++){}} //wait
		
		int last_Vout;
		
		while(Vout < 10000 || Vin < 10000){
     a20:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <Vout>
     a24:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Vout+0x1>
     a28:	80 31       	cpi	r24, 0x10	; 16
     a2a:	f7 e2       	ldi	r31, 0x27	; 39
     a2c:	9f 07       	cpc	r25, r31
     a2e:	0c f4       	brge	.+2      	; 0xa32 <call_input+0xe2>
     a30:	ac cf       	rjmp	.-168    	; 0x98a <call_input+0x3a>
     a32:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <Vin>
     a36:	30 91 38 01 	lds	r19, 0x0138	; 0x800138 <Vin+0x1>
     a3a:	20 31       	cpi	r18, 0x10	; 16
     a3c:	37 42       	sbci	r19, 0x27	; 39
     a3e:	0c f4       	brge	.+2      	; 0xa42 <call_input+0xf2>
     a40:	b2 cf       	rjmp	.-156    	; 0x9a6 <call_input+0x56>
			
			while (!( UCSR0A & (1<<UDRE0)));
			UDR0 = 10;
		}
		
		eeprom_write_byte(1, call_Vout);
     a42:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <call_Vout>
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 3c 0a 	call	0x1478	; 0x1478 <eeprom_write_byte>
		eeprom_write_byte(3, call_Vin);
     a4e:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <call_Vin>
     a52:	83 e0       	ldi	r24, 0x03	; 3
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 3c 0a 	call	0x1478	; 0x1478 <eeprom_write_byte>
		while(1){PORTB |= 0b00000001;}
     a5a:	28 9a       	sbi	0x05, 0	; 5
     a5c:	fe cf       	rjmp	.-4      	; 0xa5a <call_input+0x10a>
	}
	
	//Calibration for cells
	if(!(PINB&0x20)){
     a5e:	1d 99       	sbic	0x03, 5	; 3
     a60:	a6 c0       	rjmp	.+332    	; 0xbae <call_input+0x25e>
		OCR1A = 3;
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     a6a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		sei();
     a6e:	78 94       	sei
		
		PORTB |= 0b00000100;
     a70:	2a 9a       	sbi	0x05, 2	; 5
		call_cell1 = 30;
     a72:	8e e1       	ldi	r24, 0x1E	; 30
     a74:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <call_cell1>
		call_cell2 = 30;
     a78:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <call_cell2>
     a7c:	40 e0       	ldi	r20, 0x00	; 0
     a7e:	5a ef       	ldi	r21, 0xFA	; 250
		
		for(uint16_t k=0; k < 64000; k++){for(uint16_t l=0; l < 20; l++){PORTB |= 0b00000100; cell_counter = 19;}} //wait
     a80:	23 e1       	ldi	r18, 0x13	; 19
     a82:	09 c0       	rjmp	.+18     	; 0xa96 <call_input+0x146>
     a84:	2a 9a       	sbi	0x05, 2	; 5
     a86:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <cell_counter>
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	d9 f7       	brne	.-10     	; 0xa84 <call_input+0x134>
     a8e:	41 50       	subi	r20, 0x01	; 1
     a90:	51 09       	sbc	r21, r1
     a92:	09 f4       	brne	.+2      	; 0xa96 <call_input+0x146>
     a94:	56 c0       	rjmp	.+172    	; 0xb42 <call_input+0x1f2>
		
		while(Vout < 10000 || Vin < 10000){
			
			if(Vout < 10000){
				call_Vout ++;
				last_Vout = Vout;
     a96:	84 e1       	ldi	r24, 0x14	; 20
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	f4 cf       	rjmp	.-24     	; 0xa84 <call_input+0x134>
		
		while(cell1 < 4000 || (cell2+cell1) < 4000){
			
			if(cell1 < 4000){
				last_cell1 = cell1;
				call_cell1 ++;
     a9c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <call_cell1>
     aa0:	8f 5f       	subi	r24, 0xFF	; 255
     aa2:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <call_cell1>
			}else{
				if((last_cell1-4000) > (cell1-4000)){
					call_cell1 --;
				}
			}
			if((cell2+cell1) < 4000){
     aa6:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <cell2>
     aaa:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <cell2+0x1>
     aae:	8e 0d       	add	r24, r14
     ab0:	9f 1d       	adc	r25, r15
     ab2:	80 3a       	cpi	r24, 0xA0	; 160
     ab4:	9f 40       	sbci	r25, 0x0F	; 15
     ab6:	9c f4       	brge	.+38     	; 0xade <call_input+0x18e>
     ab8:	0d c0       	rjmp	.+26     	; 0xad4 <call_input+0x184>
			
			if(cell1 < 4000){
				last_cell1 = cell1;
				call_cell1 ++;
			}else{
				if((last_cell1-4000) > (cell1-4000)){
     aba:	60 5a       	subi	r22, 0xA0	; 160
     abc:	7f 40       	sbci	r23, 0x0F	; 15
     abe:	c7 01       	movw	r24, r14
     ac0:	80 5a       	subi	r24, 0xA0	; 160
     ac2:	9f 40       	sbci	r25, 0x0F	; 15
     ac4:	86 17       	cp	r24, r22
     ac6:	97 07       	cpc	r25, r23
     ac8:	2c f4       	brge	.+10     	; 0xad4 <call_input+0x184>
					call_cell1 --;
     aca:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <call_cell1>
     ace:	81 50       	subi	r24, 0x01	; 1
     ad0:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <call_cell1>
				}
			}
			if((cell2+cell1) < 4000){
				call_cell2 ++;
     ad4:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <call_cell2>
     ad8:	8f 5f       	subi	r24, 0xFF	; 255
     ada:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <call_cell2>
		OCR1A = 3;
		sei();
		
		PORTB |= 0b00000100;
		call_cell1 = 30;
		call_cell2 = 30;
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	3a ef       	ldi	r19, 0xFA	; 250
     ae2:	08 c0       	rjmp	.+16     	; 0xaf4 <call_input+0x1a4>
				call_cell2 ++;
				last_cell1 = cell1;
			}
			
			
			for(uint16_t k=0; k < 64000; k++){for(uint16_t l=0; l < 10; l++){PORTB |= 0b00000100; cell_counter = 255;}}
     ae4:	2a 9a       	sbi	0x05, 2	; 5
     ae6:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <cell_counter>
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	d9 f7       	brne	.-10     	; 0xae4 <call_input+0x194>
     aee:	21 50       	subi	r18, 0x01	; 1
     af0:	31 09       	sbc	r19, r1
     af2:	19 f0       	breq	.+6      	; 0xafa <call_input+0x1aa>
		OCR1A = 3;
		sei();
		
		PORTB |= 0b00000100;
		call_cell1 = 30;
		call_cell2 = 30;
     af4:	8a e0       	ldi	r24, 0x0A	; 10
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	f5 cf       	rjmp	.-22     	; 0xae4 <call_input+0x194>
			
			
			for(uint16_t k=0; k < 64000; k++){for(uint16_t l=0; l < 10; l++){PORTB |= 0b00000100; cell_counter = 255;}}
			
			
			uartprint(cell1);
     afa:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <cell1>
     afe:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <cell1+0x1>
     b02:	0e 94 10 03 	call	0x620	; 0x620 <uartprint>
			uartprint(call_cell1);
     b06:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <call_cell1>
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 94 10 03 	call	0x620	; 0x620 <uartprint>
			
			uartprint((cell2+cell1));
     b10:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <cell2>
     b14:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <cell2+0x1>
     b18:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <cell1>
     b1c:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <cell1+0x1>
     b20:	82 0f       	add	r24, r18
     b22:	93 1f       	adc	r25, r19
     b24:	0e 94 10 03 	call	0x620	; 0x620 <uartprint>
			uartprintln(call_cell2);
     b28:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <call_cell2>
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <uartprintln>
			
			while (!( UCSR0A & (1<<UDRE0)));
     b32:	f8 01       	movw	r30, r16
     b34:	80 81       	ld	r24, Z
     b36:	85 ff       	sbrs	r24, 5
     b38:	fc cf       	rjmp	.-8      	; 0xb32 <call_input+0x1e2>
			UDR0 = 10;
     b3a:	f6 01       	movw	r30, r12
     b3c:	d0 83       	st	Z, r29
     b3e:	b7 01       	movw	r22, r14
     b40:	09 c0       	rjmp	.+18     	; 0xb54 <call_input+0x204>
				call_cell2 ++;
				last_cell1 = cell1;
			}
			
			
			for(uint16_t k=0; k < 64000; k++){for(uint16_t l=0; l < 10; l++){PORTB |= 0b00000100; cell_counter = 255;}}
     b42:	cf ef       	ldi	r28, 0xFF	; 255
			uartprint(call_cell1);
			
			uartprint((cell2+cell1));
			uartprintln(call_cell2);
			
			while (!( UCSR0A & (1<<UDRE0)));
     b44:	00 ec       	ldi	r16, 0xC0	; 192
     b46:	10 e0       	ldi	r17, 0x00	; 0
			UDR0 = 10;
     b48:	0f 2e       	mov	r0, r31
     b4a:	f6 ec       	ldi	r31, 0xC6	; 198
     b4c:	cf 2e       	mov	r12, r31
     b4e:	d1 2c       	mov	r13, r1
     b50:	f0 2d       	mov	r31, r0
     b52:	da e0       	ldi	r29, 0x0A	; 10
		for(uint16_t k=0; k < 64000; k++){for(uint16_t l=0; l < 20; l++){PORTB |= 0b00000100; cell_counter = 19;}} //wait
		
		int last_cell1;
		int last_cell2;
		
		while(cell1 < 4000 || (cell2+cell1) < 4000){
     b54:	e0 90 33 01 	lds	r14, 0x0133	; 0x800133 <cell1>
     b58:	f0 90 34 01 	lds	r15, 0x0134	; 0x800134 <cell1+0x1>
     b5c:	f0 ea       	ldi	r31, 0xA0	; 160
     b5e:	ef 16       	cp	r14, r31
     b60:	ff e0       	ldi	r31, 0x0F	; 15
     b62:	ff 06       	cpc	r15, r31
     b64:	0c f4       	brge	.+2      	; 0xb68 <call_input+0x218>
     b66:	9a cf       	rjmp	.-204    	; 0xa9c <call_input+0x14c>
     b68:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <cell2>
     b6c:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <cell2+0x1>
     b70:	97 01       	movw	r18, r14
     b72:	28 0f       	add	r18, r24
     b74:	39 1f       	adc	r19, r25
     b76:	20 3a       	cpi	r18, 0xA0	; 160
     b78:	3f 40       	sbci	r19, 0x0F	; 15
     b7a:	0c f4       	brge	.+2      	; 0xb7e <call_input+0x22e>
     b7c:	9e cf       	rjmp	.-196    	; 0xaba <call_input+0x16a>
			uartprintln(call_cell2);
			
			while (!( UCSR0A & (1<<UDRE0)));
			UDR0 = 10;
		}
		if((last_cell2-4000) > (cell2-4000)){
     b7e:	80 5a       	subi	r24, 0xA0	; 160
     b80:	9f 40       	sbci	r25, 0x0F	; 15
     b82:	80 36       	cpi	r24, 0x60	; 96
     b84:	90 4f       	sbci	r25, 0xF0	; 240
     b86:	2c f4       	brge	.+10     	; 0xb92 <call_input+0x242>
			call_cell2 --;
     b88:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <call_cell2>
     b8c:	81 50       	subi	r24, 0x01	; 1
     b8e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <call_cell2>
		}
		
		eeprom_write_byte(5, call_cell1);
     b92:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <call_cell1>
     b96:	85 e0       	ldi	r24, 0x05	; 5
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 3c 0a 	call	0x1478	; 0x1478 <eeprom_write_byte>
		eeprom_write_byte(7, call_cell2);
     b9e:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <call_cell2>
     ba2:	87 e0       	ldi	r24, 0x07	; 7
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 3c 0a 	call	0x1478	; 0x1478 <eeprom_write_byte>
		while(1){PORTB |= 0b00000001;}
     baa:	28 9a       	sbi	0x05, 0	; 5
     bac:	fe cf       	rjmp	.-4      	; 0xbaa <call_input+0x25a>
	}
}
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	ff 90       	pop	r15
     bb8:	ef 90       	pop	r14
     bba:	df 90       	pop	r13
     bbc:	cf 90       	pop	r12
     bbe:	08 95       	ret

00000bc0 <main>:



int main(void){
	//call_Vout = eeprom_read_byte((uint8_t*)1);
	call_Vin = eeprom_read_byte((uint8_t*)3);
     bc0:	83 e0       	ldi	r24, 0x03	; 3
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 34 0a 	call	0x1468	; 0x1468 <eeprom_read_byte>
     bc8:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <call_Vin>
	call_cell1 = eeprom_read_byte((uint8_t*)5);
     bcc:	85 e0       	ldi	r24, 0x05	; 5
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 34 0a 	call	0x1468	; 0x1468 <eeprom_read_byte>
     bd4:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <call_cell1>
	call_cell2 = eeprom_read_byte((uint8_t*)7);
     bd8:	87 e0       	ldi	r24, 0x07	; 7
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 34 0a 	call	0x1468	; 0x1468 <eeprom_read_byte>
     be0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <call_cell2>
	call_Vout = 147;
     be4:	83 e9       	ldi	r24, 0x93	; 147
     be6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <call_Vout>
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	07 c0       	rjmp	.+14     	; 0xbfe <main+0x3e>
     bf0:	01 97       	sbiw	r24, 0x01	; 1
	
	for(uint32_t j=0; j < 100; j++){for(uint16_t k=0; k < 1770; k++){}}
     bf2:	f1 f7       	brne	.-4      	; 0xbf0 <main+0x30>
     bf4:	2f 5f       	subi	r18, 0xFF	; 255
     bf6:	3f 4f       	sbci	r19, 0xFF	; 255
     bf8:	24 36       	cpi	r18, 0x64	; 100
     bfa:	31 05       	cpc	r19, r1
     bfc:	19 f0       	breq	.+6      	; 0xc04 <main+0x44>





int main(void){
     bfe:	8a ee       	ldi	r24, 0xEA	; 234
     c00:	96 e0       	ldi	r25, 0x06	; 6
     c02:	f6 cf       	rjmp	.-20     	; 0xbf0 <main+0x30>
	call_cell1 = eeprom_read_byte((uint8_t*)5);
	call_cell2 = eeprom_read_byte((uint8_t*)7);
	call_Vout = 147;
	
	for(uint32_t j=0; j < 100; j++){for(uint16_t k=0; k < 1770; k++){}}
	initialise_uart();
     c04:	0e 94 16 01 	call	0x22c	; 0x22c <initialise_uart>
	initialise_input();
     c08:	0e 94 0d 01 	call	0x21a	; 0x21a <initialise_input>
	initialise_led();
     c0c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <initialise_led>
	initialise_ADC();
     c10:	0e 94 c8 00 	call	0x190	; 0x190 <initialise_ADC>
	
	
	call_input();
     c14:	0e 94 a8 04 	call	0x950	; 0x950 <call_input>
		
		
	
	initialise_PWM();
     c18:	0e 94 df 00 	call	0x1be	; 0x1be <initialise_PWM>
	
	
	
	
	sei();
     c1c:	78 94       	sei
// battery
	switch(check_bat(&Vout, &cell1, &cell2)){ // kijkt welke baterij er op aangelsoten zit
     c1e:	41 e3       	ldi	r20, 0x31	; 49
     c20:	51 e0       	ldi	r21, 0x01	; 1
     c22:	63 e3       	ldi	r22, 0x33	; 51
     c24:	71 e0       	ldi	r23, 0x01	; 1
     c26:	8b e3       	ldi	r24, 0x3B	; 59
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	0e 94 22 01 	call	0x244	; 0x244 <check_bat>
     c2e:	83 30       	cpi	r24, 0x03	; 3
     c30:	91 05       	cpc	r25, r1
     c32:	81 f0       	breq	.+32     	; 0xc54 <main+0x94>
     c34:	1c f4       	brge	.+6      	; 0xc3c <main+0x7c>
     c36:	02 97       	sbiw	r24, 0x02	; 2
     c38:	39 f0       	breq	.+14     	; 0xc48 <main+0x88>
     c3a:	1f c0       	rjmp	.+62     	; 0xc7a <main+0xba>
     c3c:	8c 30       	cpi	r24, 0x0C	; 12
     c3e:	91 05       	cpc	r25, r1
     c40:	79 f0       	breq	.+30     	; 0xc60 <main+0xa0>
     c42:	0d 97       	sbiw	r24, 0x0d	; 13
     c44:	a1 f0       	breq	.+40     	; 0xc6e <main+0xae>
     c46:	19 c0       	rjmp	.+50     	; 0xc7a <main+0xba>
		case 2:
			battery_type = 2;	
     c48:	82 e0       	ldi	r24, 0x02	; 2
     c4a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <battery_type>
			balance_connected = 0;
     c4e:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <balance_connected>
			break;
     c52:	13 c0       	rjmp	.+38     	; 0xc7a <main+0xba>
		case 3:
			battery_type = 3;	
     c54:	83 e0       	ldi	r24, 0x03	; 3
     c56:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <battery_type>
			balance_connected = 0;
     c5a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <balance_connected>
			break;
     c5e:	0d c0       	rjmp	.+26     	; 0xc7a <main+0xba>
		case 12:								// kijkt of balance kabel is aangelsotenbalance kabel
			battery_type = 2;	
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <battery_type>
			balance_connected = 1;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <balance_connected>
			break;
     c6c:	06 c0       	rjmp	.+12     	; 0xc7a <main+0xba>
		case 13:
			battery_type = 3;	
     c6e:	83 e0       	ldi	r24, 0x03	; 3
     c70:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <battery_type>
			balance_connected = 1;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <balance_connected>
		default:
			max_voltage = 2;
			break;
	}	//battery end
	//main
	max_voltage = cell_max_voltage * battery_type;  // max voltage wat je wilt hebben ligt aan cel type (alles in mv en ma 32768mv=65536)
     c7a:	40 91 2b 01 	lds	r20, 0x012B	; 0x80012b <battery_type>
     c7e:	24 e0       	ldi	r18, 0x04	; 4
     c80:	30 e1       	ldi	r19, 0x10	; 16
     c82:	42 9f       	mul	r20, r18
     c84:	c0 01       	movw	r24, r0
     c86:	43 9f       	mul	r20, r19
     c88:	90 0d       	add	r25, r0
     c8a:	11 24       	eor	r1, r1
     c8c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <max_voltage+0x1>
     c90:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <max_voltage>
	int current = 0;


    while (!stop) { // bij een fout komt ie in deze loop moet hem uit zetten om er uit te komen(de error loop)

		blink_times(((Iout/100)*(Vout/100))/100);
     c94:	c4 e6       	ldi	r28, 0x64	; 100
     c96:	d0 e0       	ldi	r29, 0x00	; 0
			duty = 0;
		}
		
		//Write duty to Buck FET
		if(duty > 123){
			OCR0B = 123;
     c98:	0f 2e       	mov	r0, r31
     c9a:	fb e7       	ldi	r31, 0x7B	; 123
     c9c:	7f 2e       	mov	r7, r31
     c9e:	f0 2d       	mov	r31, r0
			errore(0);
		}
//main
// library bug boost 	
		//Maximize duty cycle
		if(duty >= 210){duty = 210;}
     ca0:	0f 2e       	mov	r0, r31
     ca2:	f2 ed       	ldi	r31, 0xD2	; 210
     ca4:	8f 2e       	mov	r8, r31
     ca6:	91 2c       	mov	r9, r1
     ca8:	f0 2d       	mov	r31, r0
		
		//Write duty to boost FET
		if(duty > 120){
			OCR2B = duty-120;
			}else{
			OCR2B = 0;
     caa:	0f 2e       	mov	r0, r31
     cac:	f4 eb       	ldi	r31, 0xB4	; 180
     cae:	af 2e       	mov	r10, r31
     cb0:	b1 2c       	mov	r11, r1
     cb2:	f0 2d       	mov	r31, r0
	
	int voltage = 0;
	int current = 0;


    while (!stop) { // bij een fout komt ie in deze loop moet hem uit zetten om er uit te komen(de error loop)
     cb4:	fd c0       	rjmp	.+506    	; 0xeb0 <main+0x2f0>

		blink_times(((Iout/100)*(Vout/100))/100);
     cb6:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Iout>
     cba:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Iout+0x1>
     cbe:	be 01       	movw	r22, r28
     cc0:	0e 94 95 09 	call	0x132a	; 0x132a <__divmodhi4>
     cc4:	9b 01       	movw	r18, r22
     cc6:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <Vout>
     cca:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Vout+0x1>
     cce:	be 01       	movw	r22, r28
     cd0:	0e 94 95 09 	call	0x132a	; 0x132a <__divmodhi4>
     cd4:	26 9f       	mul	r18, r22
     cd6:	c0 01       	movw	r24, r0
     cd8:	27 9f       	mul	r18, r23
     cda:	90 0d       	add	r25, r0
     cdc:	36 9f       	mul	r19, r22
     cde:	90 0d       	add	r25, r0
     ce0:	11 24       	eor	r1, r1
     ce2:	be 01       	movw	r22, r28
     ce4:	0e 94 95 09 	call	0x132a	; 0x132a <__divmodhi4>
     ce8:	cb 01       	movw	r24, r22
     cea:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <blink_times>
	//main
	//weg		
		//Hold solar values
		voltage = Vin;
     cee:	c0 90 37 01 	lds	r12, 0x0137	; 0x800137 <Vin>
     cf2:	d0 90 38 01 	lds	r13, 0x0138	; 0x800138 <Vin+0x1>
		current = Iin;
	//weg	
	//main				
		//Calculate new duty cycle
		duty = Battery_charge(Vout + cell_compensate, Iout, voltage, current, max_voltage, duty);
     cf6:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <duty>
     cfa:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <duty+0x1>
     cfe:	00 91 05 01 	lds	r16, 0x0105	; 0x800105 <max_voltage>
     d02:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <max_voltage+0x1>
     d06:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <Iin>
     d0a:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <Iin+0x1>
     d0e:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <Iout>
     d12:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <Iout+0x1>
     d16:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <Vout>
     d1a:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <Vout+0x1>
     d1e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <cell_compensate>
     d22:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <cell_compensate+0x1>
     d26:	a6 01       	movw	r20, r12
     d28:	8e 0f       	add	r24, r30
     d2a:	9f 1f       	adc	r25, r31
     d2c:	0e 94 a6 00 	call	0x14c	; 0x14c <Battery_charge>
     d30:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <duty+0x1>
     d34:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <duty>
	
		//Stop if solar voltage below 3000mV
		if(voltage <= 3000){
     d38:	29 eb       	ldi	r18, 0xB9	; 185
     d3a:	c2 16       	cp	r12, r18
     d3c:	2b e0       	ldi	r18, 0x0B	; 11
     d3e:	d2 06       	cpc	r13, r18
     d40:	44 f4       	brge	.+16     	; 0xd52 <main+0x192>
			duty = 0;
     d42:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <duty+0x1>
     d46:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <duty>
			errore(1);      
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	0e 94 87 02 	call	0x50e	; 0x50e <errore>
     d50:	03 c0       	rjmp	.+6      	; 0xd58 <main+0x198>
		}else{
			errore(0);
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	0e 94 87 02 	call	0x50e	; 0x50e <errore>
		}
//main
// library bug boost 	
		//Maximize duty cycle
		if(duty >= 210){duty = 210;}
     d58:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <duty>
     d5c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <duty+0x1>
     d60:	82 3d       	cpi	r24, 0xD2	; 210
     d62:	91 05       	cpc	r25, r1
     d64:	64 f0       	brlt	.+24     	; 0xd7e <main+0x1be>
     d66:	90 92 03 01 	sts	0x0103, r9	; 0x800103 <duty+0x1>
     d6a:	80 92 02 01 	sts	0x0102, r8	; 0x800102 <duty>
		if(duty <= 0  ){duty = 0;}
		
			
		if(Vout >= 13000){
     d6e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <Vout>
     d72:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Vout+0x1>
     d76:	88 3c       	cpi	r24, 0xC8	; 200
     d78:	92 43       	sbci	r25, 0x32	; 50
     d7a:	cc f4       	brge	.+50     	; 0xdae <main+0x1ee>
     d7c:	26 c0       	rjmp	.+76     	; 0xdca <main+0x20a>
		}
//main
// library bug boost 	
		//Maximize duty cycle
		if(duty >= 210){duty = 210;}
		if(duty <= 0  ){duty = 0;}
     d7e:	18 16       	cp	r1, r24
     d80:	19 06       	cpc	r1, r25
     d82:	74 f0       	brlt	.+28     	; 0xda0 <main+0x1e0>
     d84:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <duty+0x1>
     d88:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <duty>
		
			
		if(Vout >= 13000){
     d8c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <Vout>
     d90:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Vout+0x1>
     d94:	88 3c       	cpi	r24, 0xC8	; 200
     d96:	92 43       	sbci	r25, 0x32	; 50
     d98:	54 f4       	brge	.+20     	; 0xdae <main+0x1ee>
			duty = 0;
		}
		
		//Write duty to Buck FET
		if(duty > 123){
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	17 c0       	rjmp	.+46     	; 0xdce <main+0x20e>
		//Maximize duty cycle
		if(duty >= 210){duty = 210;}
		if(duty <= 0  ){duty = 0;}
		
			
		if(Vout >= 13000){
     da0:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <Vout>
     da4:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Vout+0x1>
     da8:	88 3c       	cpi	r24, 0xC8	; 200
     daa:	92 43       	sbci	r25, 0x32	; 50
     dac:	3c f0       	brlt	.+14     	; 0xdbc <main+0x1fc>
			duty = 0;
     dae:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <duty+0x1>
     db2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <duty>
		}
		
		//Write duty to Buck FET
		if(duty > 123){
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	09 c0       	rjmp	.+18     	; 0xdce <main+0x20e>
     dbc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <duty>
     dc0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <duty+0x1>
     dc4:	8c 37       	cpi	r24, 0x7C	; 124
     dc6:	91 05       	cpc	r25, r1
     dc8:	14 f0       	brlt	.+4      	; 0xdce <main+0x20e>
			OCR0B = 123;
     dca:	78 bc       	out	0x28, r7	; 40
     dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <main+0x210>
			}else{
			OCR0B = duty;
     dce:	88 bd       	out	0x28, r24	; 40
		}
		
		//Write duty to boost FET
		if(duty > 120){
     dd0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <duty>
     dd4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <duty+0x1>
     dd8:	89 37       	cpi	r24, 0x79	; 121
     dda:	91 05       	cpc	r25, r1
     ddc:	24 f0       	brlt	.+8      	; 0xde6 <main+0x226>
			OCR2B = duty-120;
     dde:	88 57       	subi	r24, 0x78	; 120
     de0:	f5 01       	movw	r30, r10
     de2:	80 83       	st	Z, r24
     de4:	02 c0       	rjmp	.+4      	; 0xdea <main+0x22a>
			}else{
			OCR2B = 0;
     de6:	f5 01       	movw	r30, r10
     de8:	10 82       	st	Z, r1
		}
// library bug boost
// battery		
		if(cell_counter == 10){
     dea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <cell_counter>
     dee:	8a 30       	cpi	r24, 0x0A	; 10
     df0:	09 f0       	breq	.+2      	; 0xdf4 <main+0x234>
     df2:	4e c0       	rjmp	.+156    	; 0xe90 <main+0x2d0>
			uint8_t Highest_cell = 0;
			uint8_t Lowest_cell = 0;
			if(balance_connected){
     df4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <balance_connected>
     df8:	88 23       	and	r24, r24
     dfa:	09 f4       	brne	.+2      	; 0xdfe <main+0x23e>
     dfc:	7e c0       	rjmp	.+252    	; 0xefa <main+0x33a>
				if(battery_type == 3){
     dfe:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <battery_type>
     e02:	83 30       	cpi	r24, 0x03	; 3
     e04:	29 f5       	brne	.+74     	; 0xe50 <main+0x290>
					if(cell1 > cell2){
     e06:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <cell1>
     e0a:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <cell1+0x1>
     e0e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <cell2>
     e12:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <cell2+0x1>
     e16:	82 17       	cp	r24, r18
     e18:	93 07       	cpc	r25, r19
     e1a:	6c f4       	brge	.+26     	; 0xe36 <main+0x276>
						if(cell1 > cell3){
     e1c:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <cell3>
     e20:	50 91 30 01 	lds	r21, 0x0130	; 0x800130 <cell3+0x1>
     e24:	42 17       	cp	r20, r18
     e26:	53 07       	cpc	r21, r19
     e28:	0c f0       	brlt	.+2      	; 0xe2c <main+0x26c>
     e2a:	4c c0       	rjmp	.+152    	; 0xec4 <main+0x304>
							Highest_cell = 1;
							if(cell2 > cell3){
     e2c:	48 17       	cp	r20, r24
     e2e:	59 07       	cpc	r21, r25
     e30:	0c f4       	brge	.+2      	; 0xe34 <main+0x274>
     e32:	88 c0       	rjmp	.+272    	; 0xf44 <main+0x384>
     e34:	67 c0       	rjmp	.+206    	; 0xf04 <main+0x344>
						}else{
							Highest_cell = 3;
							Lowest_cell = 2;
						}
					}else{
						if(cell2 > cell3){
     e36:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <cell3>
     e3a:	50 91 30 01 	lds	r21, 0x0130	; 0x800130 <cell3+0x1>
     e3e:	48 17       	cp	r20, r24
     e40:	59 07       	cpc	r21, r25
     e42:	0c f0       	brlt	.+2      	; 0xe46 <main+0x286>
     e44:	3f c0       	rjmp	.+126    	; 0xec4 <main+0x304>
							Highest_cell = 2;
							if(cell1 > cell3){
     e46:	42 17       	cp	r20, r18
     e48:	53 07       	cpc	r21, r19
     e4a:	0c f4       	brge	.+2      	; 0xe4e <main+0x28e>
     e4c:	b3 c0       	rjmp	.+358    	; 0xfb4 <main+0x3f4>
     e4e:	92 c0       	rjmp	.+292    	; 0xf74 <main+0x3b4>
							Highest_cell = 3;
							Lowest_cell = 2;
						}
					}
				}else{
					if(cell1 > cell2){
     e50:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <cell1>
     e54:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <cell1+0x1>
     e58:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <cell2>
     e5c:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <cell2+0x1>
     e60:	82 17       	cp	r24, r18
     e62:	93 07       	cpc	r25, r19
     e64:	0c f4       	brge	.+2      	; 0xe68 <main+0x2a8>
     e66:	4e c0       	rjmp	.+156    	; 0xf04 <main+0x344>
     e68:	85 c0       	rjmp	.+266    	; 0xf74 <main+0x3b4>
					cell_compensate = 0;
					break;
				case 12:
					// Cell 1 highest, Cell 2 lowest
					cell_compensate = (cell1 * battery_type) - Vout;
					if((cell1 - cell2) > max_cell_difference)errore(3);
     e6a:	83 e0       	ldi	r24, 0x03	; 3
     e6c:	0e 94 87 02 	call	0x50e	; 0x50e <errore>
     e70:	0f c0       	rjmp	.+30     	; 0xe90 <main+0x2d0>
					break;
				case 13:
					// Cell 1 highest, cell 3 lowest
					cell_compensate = (cell1 * battery_type) - Vout;
					if((cell1 - cell3) > max_cell_difference)errore(3);
     e72:	83 e0       	ldi	r24, 0x03	; 3
     e74:	0e 94 87 02 	call	0x50e	; 0x50e <errore>
     e78:	0b c0       	rjmp	.+22     	; 0xe90 <main+0x2d0>
					break;
				case 21:
					// Cell 2 highest, cell 1 lowest
					cell_compensate = (cell2 * battery_type) - Vout;
					if((cell2 - cell1) > max_cell_difference)errore(3);
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	0e 94 87 02 	call	0x50e	; 0x50e <errore>
     e80:	07 c0       	rjmp	.+14     	; 0xe90 <main+0x2d0>
					break;
				case 23:
					// Cell 2 highest, cell 3 lowest
					cell_compensate = (cell2 * battery_type) - Vout;
					if((cell2 - cell3) > max_cell_difference)errore(3);
     e82:	83 e0       	ldi	r24, 0x03	; 3
     e84:	0e 94 87 02 	call	0x50e	; 0x50e <errore>
     e88:	03 c0       	rjmp	.+6      	; 0xe90 <main+0x2d0>
					if((cell3 - cell1) > max_cell_difference)errore(3);
					break;
				case 32:
					// Cell 3 highest, cell 2 lowest
					cell_compensate = (cell3 * battery_type) - Vout;
					if((cell3 - cell2) > max_cell_difference)errore(3);
     e8a:	83 e0       	ldi	r24, 0x03	; 3
     e8c:	0e 94 87 02 	call	0x50e	; 0x50e <errore>
		//uartprint(call_cell1);
		//uartprint(cell1);
		//uartprint(call_cell2);
		//uartprint(cell2);
		//uartprint(cell3);
		uartprint(Vout);
     e90:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <Vout>
     e94:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Vout+0x1>
     e98:	0e 94 10 03 	call	0x620	; 0x620 <uartprint>
		//uartprint(Vin);
		uartprintln(Iout);
     e9c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Iout>
     ea0:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Iout+0x1>
     ea4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <uartprintln>
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	9a ef       	ldi	r25, 0xFA	; 250
     eac:	01 97       	sbiw	r24, 0x01	; 1
		//uartprintln(cell_compensate);
// debug mag weg		
		
// main 
		for(uint16_t k=0; k < 64000; k++){for(uint16_t l=0; l < 10; l++){}}
     eae:	f1 f7       	brne	.-4      	; 0xeac <main+0x2ec>
	
	int voltage = 0;
	int current = 0;


    while (!stop) { // bij een fout komt ie in deze loop moet hem uit zetten om er uit te komen(de error loop)
     eb0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <stop>
     eb4:	88 23       	and	r24, r24
     eb6:	09 f4       	brne	.+2      	; 0xeba <main+0x2fa>
     eb8:	fe ce       	rjmp	.-516    	; 0xcb6 <main+0xf6>
    }

	//If errore detected loop forever with timers 0
	while(1){
		OCR0B = 0;
		OCR2B = 0;
     eba:	e4 eb       	ldi	r30, 0xB4	; 180
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
		for(uint16_t k=0; k < 64000; k++){for(uint16_t l=0; l < 10; l++){}}
    }

	//If errore detected loop forever with timers 0
	while(1){
		OCR0B = 0;
     ebe:	18 bc       	out	0x28, r1	; 40
		OCR2B = 0;
     ec0:	10 82       	st	Z, r1
     ec2:	fd cf       	rjmp	.-6      	; 0xebe <main+0x2fe>
					cell_compensate = (cell3 * battery_type) - Vout;
					if((cell3 - cell1) > max_cell_difference)errore(3);
					break;
				case 32:
					// Cell 3 highest, cell 2 lowest
					cell_compensate = (cell3 * battery_type) - Vout;
     ec4:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <battery_type>
     ec8:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <cell3>
     ecc:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <cell3+0x1>
     ed0:	62 9f       	mul	r22, r18
     ed2:	a0 01       	movw	r20, r0
     ed4:	63 9f       	mul	r22, r19
     ed6:	50 0d       	add	r21, r0
     ed8:	11 24       	eor	r1, r1
     eda:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <Vout>
     ede:	70 91 3c 01 	lds	r23, 0x013C	; 0x80013c <Vout+0x1>
     ee2:	46 1b       	sub	r20, r22
     ee4:	57 0b       	sbc	r21, r23
     ee6:	50 93 2e 01 	sts	0x012E, r21	; 0x80012e <cell_compensate+0x1>
     eea:	40 93 2d 01 	sts	0x012D, r20	; 0x80012d <cell_compensate>
					if((cell3 - cell2) > max_cell_difference)errore(3);
     eee:	28 1b       	sub	r18, r24
     ef0:	39 0b       	sbc	r19, r25
     ef2:	29 3c       	cpi	r18, 0xC9	; 201
     ef4:	31 05       	cpc	r19, r1
     ef6:	64 f2       	brlt	.-104    	; 0xe90 <main+0x2d0>
     ef8:	c8 cf       	rjmp	.-112    	; 0xe8a <main+0x2ca>
			}
	
			switch((Highest_cell*10) + Lowest_cell){
				case 0:
					//No ballance connected
					cell_compensate = 0;
     efa:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <cell_compensate+0x1>
     efe:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <cell_compensate>
					break;
     f02:	c6 cf       	rjmp	.-116    	; 0xe90 <main+0x2d0>
				case 12:
					// Cell 1 highest, Cell 2 lowest
					cell_compensate = (cell1 * battery_type) - Vout;
     f04:	40 91 2b 01 	lds	r20, 0x012B	; 0x80012b <battery_type>
     f08:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <cell1>
     f0c:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <cell1+0x1>
     f10:	48 9f       	mul	r20, r24
     f12:	90 01       	movw	r18, r0
     f14:	49 9f       	mul	r20, r25
     f16:	30 0d       	add	r19, r0
     f18:	11 24       	eor	r1, r1
     f1a:	40 91 3b 01 	lds	r20, 0x013B	; 0x80013b <Vout>
     f1e:	50 91 3c 01 	lds	r21, 0x013C	; 0x80013c <Vout+0x1>
     f22:	24 1b       	sub	r18, r20
     f24:	35 0b       	sbc	r19, r21
     f26:	30 93 2e 01 	sts	0x012E, r19	; 0x80012e <cell_compensate+0x1>
     f2a:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <cell_compensate>
					if((cell1 - cell2) > max_cell_difference)errore(3);
     f2e:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <cell2>
     f32:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <cell2+0x1>
     f36:	82 1b       	sub	r24, r18
     f38:	93 0b       	sbc	r25, r19
     f3a:	89 3c       	cpi	r24, 0xC9	; 201
     f3c:	91 05       	cpc	r25, r1
     f3e:	0c f4       	brge	.+2      	; 0xf42 <main+0x382>
     f40:	a7 cf       	rjmp	.-178    	; 0xe90 <main+0x2d0>
     f42:	93 cf       	rjmp	.-218    	; 0xe6a <main+0x2aa>
					break;
				case 13:
					// Cell 1 highest, cell 3 lowest
					cell_compensate = (cell1 * battery_type) - Vout;
     f44:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <battery_type>
     f48:	62 9f       	mul	r22, r18
     f4a:	c0 01       	movw	r24, r0
     f4c:	63 9f       	mul	r22, r19
     f4e:	90 0d       	add	r25, r0
     f50:	11 24       	eor	r1, r1
     f52:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <Vout>
     f56:	70 91 3c 01 	lds	r23, 0x013C	; 0x80013c <Vout+0x1>
     f5a:	86 1b       	sub	r24, r22
     f5c:	97 0b       	sbc	r25, r23
     f5e:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <cell_compensate+0x1>
     f62:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <cell_compensate>
					if((cell1 - cell3) > max_cell_difference)errore(3);
     f66:	24 1b       	sub	r18, r20
     f68:	35 0b       	sbc	r19, r21
     f6a:	29 3c       	cpi	r18, 0xC9	; 201
     f6c:	31 05       	cpc	r19, r1
     f6e:	0c f4       	brge	.+2      	; 0xf72 <main+0x3b2>
     f70:	8f cf       	rjmp	.-226    	; 0xe90 <main+0x2d0>
     f72:	7f cf       	rjmp	.-258    	; 0xe72 <main+0x2b2>
					break;
				case 21:
					// Cell 2 highest, cell 1 lowest
					cell_compensate = (cell2 * battery_type) - Vout;
     f74:	40 91 2b 01 	lds	r20, 0x012B	; 0x80012b <battery_type>
     f78:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <cell2>
     f7c:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <cell2+0x1>
     f80:	48 9f       	mul	r20, r24
     f82:	90 01       	movw	r18, r0
     f84:	49 9f       	mul	r20, r25
     f86:	30 0d       	add	r19, r0
     f88:	11 24       	eor	r1, r1
     f8a:	40 91 3b 01 	lds	r20, 0x013B	; 0x80013b <Vout>
     f8e:	50 91 3c 01 	lds	r21, 0x013C	; 0x80013c <Vout+0x1>
     f92:	24 1b       	sub	r18, r20
     f94:	35 0b       	sbc	r19, r21
     f96:	30 93 2e 01 	sts	0x012E, r19	; 0x80012e <cell_compensate+0x1>
     f9a:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <cell_compensate>
					if((cell2 - cell1) > max_cell_difference)errore(3);
     f9e:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <cell1>
     fa2:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <cell1+0x1>
     fa6:	82 1b       	sub	r24, r18
     fa8:	93 0b       	sbc	r25, r19
     faa:	89 3c       	cpi	r24, 0xC9	; 201
     fac:	91 05       	cpc	r25, r1
     fae:	0c f4       	brge	.+2      	; 0xfb2 <main+0x3f2>
     fb0:	6f cf       	rjmp	.-290    	; 0xe90 <main+0x2d0>
     fb2:	63 cf       	rjmp	.-314    	; 0xe7a <main+0x2ba>
					break;
				case 23:
					// Cell 2 highest, cell 3 lowest
					cell_compensate = (cell2 * battery_type) - Vout;
     fb4:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <battery_type>
     fb8:	68 9f       	mul	r22, r24
     fba:	90 01       	movw	r18, r0
     fbc:	69 9f       	mul	r22, r25
     fbe:	30 0d       	add	r19, r0
     fc0:	11 24       	eor	r1, r1
     fc2:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <Vout>
     fc6:	70 91 3c 01 	lds	r23, 0x013C	; 0x80013c <Vout+0x1>
     fca:	26 1b       	sub	r18, r22
     fcc:	37 0b       	sbc	r19, r23
     fce:	30 93 2e 01 	sts	0x012E, r19	; 0x80012e <cell_compensate+0x1>
     fd2:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <cell_compensate>
					if((cell2 - cell3) > max_cell_difference)errore(3);
     fd6:	84 1b       	sub	r24, r20
     fd8:	95 0b       	sbc	r25, r21
     fda:	89 3c       	cpi	r24, 0xC9	; 201
     fdc:	91 05       	cpc	r25, r1
     fde:	0c f4       	brge	.+2      	; 0xfe2 <main+0x422>
     fe0:	57 cf       	rjmp	.-338    	; 0xe90 <main+0x2d0>
     fe2:	4f cf       	rjmp	.-354    	; 0xe82 <main+0x2c2>

00000fe4 <__divsf3>:
     fe4:	0e 94 06 08 	call	0x100c	; 0x100c <__divsf3x>
     fe8:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__fp_round>
     fec:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__fp_pscB>
     ff0:	58 f0       	brcs	.+22     	; 0x1008 <__divsf3+0x24>
     ff2:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__fp_pscA>
     ff6:	40 f0       	brcs	.+16     	; 0x1008 <__divsf3+0x24>
     ff8:	29 f4       	brne	.+10     	; 0x1004 <__divsf3+0x20>
     ffa:	5f 3f       	cpi	r21, 0xFF	; 255
     ffc:	29 f0       	breq	.+10     	; 0x1008 <__divsf3+0x24>
     ffe:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__fp_inf>
    1002:	51 11       	cpse	r21, r1
    1004:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__fp_szero>
    1008:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__fp_nan>

0000100c <__divsf3x>:
    100c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__fp_split3>
    1010:	68 f3       	brcs	.-38     	; 0xfec <__divsf3+0x8>

00001012 <__divsf3_pse>:
    1012:	99 23       	and	r25, r25
    1014:	b1 f3       	breq	.-20     	; 0x1002 <__divsf3+0x1e>
    1016:	55 23       	and	r21, r21
    1018:	91 f3       	breq	.-28     	; 0xffe <__divsf3+0x1a>
    101a:	95 1b       	sub	r25, r21
    101c:	55 0b       	sbc	r21, r21
    101e:	bb 27       	eor	r27, r27
    1020:	aa 27       	eor	r26, r26
    1022:	62 17       	cp	r22, r18
    1024:	73 07       	cpc	r23, r19
    1026:	84 07       	cpc	r24, r20
    1028:	38 f0       	brcs	.+14     	; 0x1038 <__divsf3_pse+0x26>
    102a:	9f 5f       	subi	r25, 0xFF	; 255
    102c:	5f 4f       	sbci	r21, 0xFF	; 255
    102e:	22 0f       	add	r18, r18
    1030:	33 1f       	adc	r19, r19
    1032:	44 1f       	adc	r20, r20
    1034:	aa 1f       	adc	r26, r26
    1036:	a9 f3       	breq	.-22     	; 0x1022 <__divsf3_pse+0x10>
    1038:	35 d0       	rcall	.+106    	; 0x10a4 <__divsf3_pse+0x92>
    103a:	0e 2e       	mov	r0, r30
    103c:	3a f0       	brmi	.+14     	; 0x104c <__divsf3_pse+0x3a>
    103e:	e0 e8       	ldi	r30, 0x80	; 128
    1040:	32 d0       	rcall	.+100    	; 0x10a6 <__divsf3_pse+0x94>
    1042:	91 50       	subi	r25, 0x01	; 1
    1044:	50 40       	sbci	r21, 0x00	; 0
    1046:	e6 95       	lsr	r30
    1048:	00 1c       	adc	r0, r0
    104a:	ca f7       	brpl	.-14     	; 0x103e <__divsf3_pse+0x2c>
    104c:	2b d0       	rcall	.+86     	; 0x10a4 <__divsf3_pse+0x92>
    104e:	fe 2f       	mov	r31, r30
    1050:	29 d0       	rcall	.+82     	; 0x10a4 <__divsf3_pse+0x92>
    1052:	66 0f       	add	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	88 1f       	adc	r24, r24
    1058:	bb 1f       	adc	r27, r27
    105a:	26 17       	cp	r18, r22
    105c:	37 07       	cpc	r19, r23
    105e:	48 07       	cpc	r20, r24
    1060:	ab 07       	cpc	r26, r27
    1062:	b0 e8       	ldi	r27, 0x80	; 128
    1064:	09 f0       	breq	.+2      	; 0x1068 <__divsf3_pse+0x56>
    1066:	bb 0b       	sbc	r27, r27
    1068:	80 2d       	mov	r24, r0
    106a:	bf 01       	movw	r22, r30
    106c:	ff 27       	eor	r31, r31
    106e:	93 58       	subi	r25, 0x83	; 131
    1070:	5f 4f       	sbci	r21, 0xFF	; 255
    1072:	3a f0       	brmi	.+14     	; 0x1082 <__divsf3_pse+0x70>
    1074:	9e 3f       	cpi	r25, 0xFE	; 254
    1076:	51 05       	cpc	r21, r1
    1078:	78 f0       	brcs	.+30     	; 0x1098 <__divsf3_pse+0x86>
    107a:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__fp_inf>
    107e:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__fp_szero>
    1082:	5f 3f       	cpi	r21, 0xFF	; 255
    1084:	e4 f3       	brlt	.-8      	; 0x107e <__divsf3_pse+0x6c>
    1086:	98 3e       	cpi	r25, 0xE8	; 232
    1088:	d4 f3       	brlt	.-12     	; 0x107e <__divsf3_pse+0x6c>
    108a:	86 95       	lsr	r24
    108c:	77 95       	ror	r23
    108e:	67 95       	ror	r22
    1090:	b7 95       	ror	r27
    1092:	f7 95       	ror	r31
    1094:	9f 5f       	subi	r25, 0xFF	; 255
    1096:	c9 f7       	brne	.-14     	; 0x108a <__divsf3_pse+0x78>
    1098:	88 0f       	add	r24, r24
    109a:	91 1d       	adc	r25, r1
    109c:	96 95       	lsr	r25
    109e:	87 95       	ror	r24
    10a0:	97 f9       	bld	r25, 7
    10a2:	08 95       	ret
    10a4:	e1 e0       	ldi	r30, 0x01	; 1
    10a6:	66 0f       	add	r22, r22
    10a8:	77 1f       	adc	r23, r23
    10aa:	88 1f       	adc	r24, r24
    10ac:	bb 1f       	adc	r27, r27
    10ae:	62 17       	cp	r22, r18
    10b0:	73 07       	cpc	r23, r19
    10b2:	84 07       	cpc	r24, r20
    10b4:	ba 07       	cpc	r27, r26
    10b6:	20 f0       	brcs	.+8      	; 0x10c0 <__divsf3_pse+0xae>
    10b8:	62 1b       	sub	r22, r18
    10ba:	73 0b       	sbc	r23, r19
    10bc:	84 0b       	sbc	r24, r20
    10be:	ba 0b       	sbc	r27, r26
    10c0:	ee 1f       	adc	r30, r30
    10c2:	88 f7       	brcc	.-30     	; 0x10a6 <__divsf3_pse+0x94>
    10c4:	e0 95       	com	r30
    10c6:	08 95       	ret

000010c8 <__fixsfsi>:
    10c8:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
    10cc:	68 94       	set
    10ce:	b1 11       	cpse	r27, r1
    10d0:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__fp_szero>
    10d4:	08 95       	ret

000010d6 <__fixunssfsi>:
    10d6:	0e 94 07 09 	call	0x120e	; 0x120e <__fp_splitA>
    10da:	88 f0       	brcs	.+34     	; 0x10fe <__fixunssfsi+0x28>
    10dc:	9f 57       	subi	r25, 0x7F	; 127
    10de:	98 f0       	brcs	.+38     	; 0x1106 <__fixunssfsi+0x30>
    10e0:	b9 2f       	mov	r27, r25
    10e2:	99 27       	eor	r25, r25
    10e4:	b7 51       	subi	r27, 0x17	; 23
    10e6:	b0 f0       	brcs	.+44     	; 0x1114 <__fixunssfsi+0x3e>
    10e8:	e1 f0       	breq	.+56     	; 0x1122 <__fixunssfsi+0x4c>
    10ea:	66 0f       	add	r22, r22
    10ec:	77 1f       	adc	r23, r23
    10ee:	88 1f       	adc	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	1a f0       	brmi	.+6      	; 0x10fa <__fixunssfsi+0x24>
    10f4:	ba 95       	dec	r27
    10f6:	c9 f7       	brne	.-14     	; 0x10ea <__fixunssfsi+0x14>
    10f8:	14 c0       	rjmp	.+40     	; 0x1122 <__fixunssfsi+0x4c>
    10fa:	b1 30       	cpi	r27, 0x01	; 1
    10fc:	91 f0       	breq	.+36     	; 0x1122 <__fixunssfsi+0x4c>
    10fe:	0e 94 21 09 	call	0x1242	; 0x1242 <__fp_zero>
    1102:	b1 e0       	ldi	r27, 0x01	; 1
    1104:	08 95       	ret
    1106:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__fp_zero>
    110a:	67 2f       	mov	r22, r23
    110c:	78 2f       	mov	r23, r24
    110e:	88 27       	eor	r24, r24
    1110:	b8 5f       	subi	r27, 0xF8	; 248
    1112:	39 f0       	breq	.+14     	; 0x1122 <__fixunssfsi+0x4c>
    1114:	b9 3f       	cpi	r27, 0xF9	; 249
    1116:	cc f3       	brlt	.-14     	; 0x110a <__fixunssfsi+0x34>
    1118:	86 95       	lsr	r24
    111a:	77 95       	ror	r23
    111c:	67 95       	ror	r22
    111e:	b3 95       	inc	r27
    1120:	d9 f7       	brne	.-10     	; 0x1118 <__fixunssfsi+0x42>
    1122:	3e f4       	brtc	.+14     	; 0x1132 <__fixunssfsi+0x5c>
    1124:	90 95       	com	r25
    1126:	80 95       	com	r24
    1128:	70 95       	com	r23
    112a:	61 95       	neg	r22
    112c:	7f 4f       	sbci	r23, 0xFF	; 255
    112e:	8f 4f       	sbci	r24, 0xFF	; 255
    1130:	9f 4f       	sbci	r25, 0xFF	; 255
    1132:	08 95       	ret

00001134 <__floatunsisf>:
    1134:	e8 94       	clt
    1136:	09 c0       	rjmp	.+18     	; 0x114a <__floatsisf+0x12>

00001138 <__floatsisf>:
    1138:	97 fb       	bst	r25, 7
    113a:	3e f4       	brtc	.+14     	; 0x114a <__floatsisf+0x12>
    113c:	90 95       	com	r25
    113e:	80 95       	com	r24
    1140:	70 95       	com	r23
    1142:	61 95       	neg	r22
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
    1146:	8f 4f       	sbci	r24, 0xFF	; 255
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	99 23       	and	r25, r25
    114c:	a9 f0       	breq	.+42     	; 0x1178 <__floatsisf+0x40>
    114e:	f9 2f       	mov	r31, r25
    1150:	96 e9       	ldi	r25, 0x96	; 150
    1152:	bb 27       	eor	r27, r27
    1154:	93 95       	inc	r25
    1156:	f6 95       	lsr	r31
    1158:	87 95       	ror	r24
    115a:	77 95       	ror	r23
    115c:	67 95       	ror	r22
    115e:	b7 95       	ror	r27
    1160:	f1 11       	cpse	r31, r1
    1162:	f8 cf       	rjmp	.-16     	; 0x1154 <__floatsisf+0x1c>
    1164:	fa f4       	brpl	.+62     	; 0x11a4 <__floatsisf+0x6c>
    1166:	bb 0f       	add	r27, r27
    1168:	11 f4       	brne	.+4      	; 0x116e <__floatsisf+0x36>
    116a:	60 ff       	sbrs	r22, 0
    116c:	1b c0       	rjmp	.+54     	; 0x11a4 <__floatsisf+0x6c>
    116e:	6f 5f       	subi	r22, 0xFF	; 255
    1170:	7f 4f       	sbci	r23, 0xFF	; 255
    1172:	8f 4f       	sbci	r24, 0xFF	; 255
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	16 c0       	rjmp	.+44     	; 0x11a4 <__floatsisf+0x6c>
    1178:	88 23       	and	r24, r24
    117a:	11 f0       	breq	.+4      	; 0x1180 <__floatsisf+0x48>
    117c:	96 e9       	ldi	r25, 0x96	; 150
    117e:	11 c0       	rjmp	.+34     	; 0x11a2 <__floatsisf+0x6a>
    1180:	77 23       	and	r23, r23
    1182:	21 f0       	breq	.+8      	; 0x118c <__floatsisf+0x54>
    1184:	9e e8       	ldi	r25, 0x8E	; 142
    1186:	87 2f       	mov	r24, r23
    1188:	76 2f       	mov	r23, r22
    118a:	05 c0       	rjmp	.+10     	; 0x1196 <__floatsisf+0x5e>
    118c:	66 23       	and	r22, r22
    118e:	71 f0       	breq	.+28     	; 0x11ac <__floatsisf+0x74>
    1190:	96 e8       	ldi	r25, 0x86	; 134
    1192:	86 2f       	mov	r24, r22
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	2a f0       	brmi	.+10     	; 0x11a4 <__floatsisf+0x6c>
    119a:	9a 95       	dec	r25
    119c:	66 0f       	add	r22, r22
    119e:	77 1f       	adc	r23, r23
    11a0:	88 1f       	adc	r24, r24
    11a2:	da f7       	brpl	.-10     	; 0x119a <__floatsisf+0x62>
    11a4:	88 0f       	add	r24, r24
    11a6:	96 95       	lsr	r25
    11a8:	87 95       	ror	r24
    11aa:	97 f9       	bld	r25, 7
    11ac:	08 95       	ret

000011ae <__fp_inf>:
    11ae:	97 f9       	bld	r25, 7
    11b0:	9f 67       	ori	r25, 0x7F	; 127
    11b2:	80 e8       	ldi	r24, 0x80	; 128
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	08 95       	ret

000011ba <__fp_nan>:
    11ba:	9f ef       	ldi	r25, 0xFF	; 255
    11bc:	80 ec       	ldi	r24, 0xC0	; 192
    11be:	08 95       	ret

000011c0 <__fp_pscA>:
    11c0:	00 24       	eor	r0, r0
    11c2:	0a 94       	dec	r0
    11c4:	16 16       	cp	r1, r22
    11c6:	17 06       	cpc	r1, r23
    11c8:	18 06       	cpc	r1, r24
    11ca:	09 06       	cpc	r0, r25
    11cc:	08 95       	ret

000011ce <__fp_pscB>:
    11ce:	00 24       	eor	r0, r0
    11d0:	0a 94       	dec	r0
    11d2:	12 16       	cp	r1, r18
    11d4:	13 06       	cpc	r1, r19
    11d6:	14 06       	cpc	r1, r20
    11d8:	05 06       	cpc	r0, r21
    11da:	08 95       	ret

000011dc <__fp_round>:
    11dc:	09 2e       	mov	r0, r25
    11de:	03 94       	inc	r0
    11e0:	00 0c       	add	r0, r0
    11e2:	11 f4       	brne	.+4      	; 0x11e8 <__fp_round+0xc>
    11e4:	88 23       	and	r24, r24
    11e6:	52 f0       	brmi	.+20     	; 0x11fc <__fp_round+0x20>
    11e8:	bb 0f       	add	r27, r27
    11ea:	40 f4       	brcc	.+16     	; 0x11fc <__fp_round+0x20>
    11ec:	bf 2b       	or	r27, r31
    11ee:	11 f4       	brne	.+4      	; 0x11f4 <__fp_round+0x18>
    11f0:	60 ff       	sbrs	r22, 0
    11f2:	04 c0       	rjmp	.+8      	; 0x11fc <__fp_round+0x20>
    11f4:	6f 5f       	subi	r22, 0xFF	; 255
    11f6:	7f 4f       	sbci	r23, 0xFF	; 255
    11f8:	8f 4f       	sbci	r24, 0xFF	; 255
    11fa:	9f 4f       	sbci	r25, 0xFF	; 255
    11fc:	08 95       	ret

000011fe <__fp_split3>:
    11fe:	57 fd       	sbrc	r21, 7
    1200:	90 58       	subi	r25, 0x80	; 128
    1202:	44 0f       	add	r20, r20
    1204:	55 1f       	adc	r21, r21
    1206:	59 f0       	breq	.+22     	; 0x121e <__fp_splitA+0x10>
    1208:	5f 3f       	cpi	r21, 0xFF	; 255
    120a:	71 f0       	breq	.+28     	; 0x1228 <__fp_splitA+0x1a>
    120c:	47 95       	ror	r20

0000120e <__fp_splitA>:
    120e:	88 0f       	add	r24, r24
    1210:	97 fb       	bst	r25, 7
    1212:	99 1f       	adc	r25, r25
    1214:	61 f0       	breq	.+24     	; 0x122e <__fp_splitA+0x20>
    1216:	9f 3f       	cpi	r25, 0xFF	; 255
    1218:	79 f0       	breq	.+30     	; 0x1238 <__fp_splitA+0x2a>
    121a:	87 95       	ror	r24
    121c:	08 95       	ret
    121e:	12 16       	cp	r1, r18
    1220:	13 06       	cpc	r1, r19
    1222:	14 06       	cpc	r1, r20
    1224:	55 1f       	adc	r21, r21
    1226:	f2 cf       	rjmp	.-28     	; 0x120c <__fp_split3+0xe>
    1228:	46 95       	lsr	r20
    122a:	f1 df       	rcall	.-30     	; 0x120e <__fp_splitA>
    122c:	08 c0       	rjmp	.+16     	; 0x123e <__fp_splitA+0x30>
    122e:	16 16       	cp	r1, r22
    1230:	17 06       	cpc	r1, r23
    1232:	18 06       	cpc	r1, r24
    1234:	99 1f       	adc	r25, r25
    1236:	f1 cf       	rjmp	.-30     	; 0x121a <__fp_splitA+0xc>
    1238:	86 95       	lsr	r24
    123a:	71 05       	cpc	r23, r1
    123c:	61 05       	cpc	r22, r1
    123e:	08 94       	sec
    1240:	08 95       	ret

00001242 <__fp_zero>:
    1242:	e8 94       	clt

00001244 <__fp_szero>:
    1244:	bb 27       	eor	r27, r27
    1246:	66 27       	eor	r22, r22
    1248:	77 27       	eor	r23, r23
    124a:	cb 01       	movw	r24, r22
    124c:	97 f9       	bld	r25, 7
    124e:	08 95       	ret

00001250 <__mulsf3>:
    1250:	0e 94 3b 09 	call	0x1276	; 0x1276 <__mulsf3x>
    1254:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__fp_round>
    1258:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__fp_pscA>
    125c:	38 f0       	brcs	.+14     	; 0x126c <__mulsf3+0x1c>
    125e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__fp_pscB>
    1262:	20 f0       	brcs	.+8      	; 0x126c <__mulsf3+0x1c>
    1264:	95 23       	and	r25, r21
    1266:	11 f0       	breq	.+4      	; 0x126c <__mulsf3+0x1c>
    1268:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__fp_inf>
    126c:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__fp_nan>
    1270:	11 24       	eor	r1, r1
    1272:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__fp_szero>

00001276 <__mulsf3x>:
    1276:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__fp_split3>
    127a:	70 f3       	brcs	.-36     	; 0x1258 <__mulsf3+0x8>

0000127c <__mulsf3_pse>:
    127c:	95 9f       	mul	r25, r21
    127e:	c1 f3       	breq	.-16     	; 0x1270 <__mulsf3+0x20>
    1280:	95 0f       	add	r25, r21
    1282:	50 e0       	ldi	r21, 0x00	; 0
    1284:	55 1f       	adc	r21, r21
    1286:	62 9f       	mul	r22, r18
    1288:	f0 01       	movw	r30, r0
    128a:	72 9f       	mul	r23, r18
    128c:	bb 27       	eor	r27, r27
    128e:	f0 0d       	add	r31, r0
    1290:	b1 1d       	adc	r27, r1
    1292:	63 9f       	mul	r22, r19
    1294:	aa 27       	eor	r26, r26
    1296:	f0 0d       	add	r31, r0
    1298:	b1 1d       	adc	r27, r1
    129a:	aa 1f       	adc	r26, r26
    129c:	64 9f       	mul	r22, r20
    129e:	66 27       	eor	r22, r22
    12a0:	b0 0d       	add	r27, r0
    12a2:	a1 1d       	adc	r26, r1
    12a4:	66 1f       	adc	r22, r22
    12a6:	82 9f       	mul	r24, r18
    12a8:	22 27       	eor	r18, r18
    12aa:	b0 0d       	add	r27, r0
    12ac:	a1 1d       	adc	r26, r1
    12ae:	62 1f       	adc	r22, r18
    12b0:	73 9f       	mul	r23, r19
    12b2:	b0 0d       	add	r27, r0
    12b4:	a1 1d       	adc	r26, r1
    12b6:	62 1f       	adc	r22, r18
    12b8:	83 9f       	mul	r24, r19
    12ba:	a0 0d       	add	r26, r0
    12bc:	61 1d       	adc	r22, r1
    12be:	22 1f       	adc	r18, r18
    12c0:	74 9f       	mul	r23, r20
    12c2:	33 27       	eor	r19, r19
    12c4:	a0 0d       	add	r26, r0
    12c6:	61 1d       	adc	r22, r1
    12c8:	23 1f       	adc	r18, r19
    12ca:	84 9f       	mul	r24, r20
    12cc:	60 0d       	add	r22, r0
    12ce:	21 1d       	adc	r18, r1
    12d0:	82 2f       	mov	r24, r18
    12d2:	76 2f       	mov	r23, r22
    12d4:	6a 2f       	mov	r22, r26
    12d6:	11 24       	eor	r1, r1
    12d8:	9f 57       	subi	r25, 0x7F	; 127
    12da:	50 40       	sbci	r21, 0x00	; 0
    12dc:	9a f0       	brmi	.+38     	; 0x1304 <__mulsf3_pse+0x88>
    12de:	f1 f0       	breq	.+60     	; 0x131c <__mulsf3_pse+0xa0>
    12e0:	88 23       	and	r24, r24
    12e2:	4a f0       	brmi	.+18     	; 0x12f6 <__mulsf3_pse+0x7a>
    12e4:	ee 0f       	add	r30, r30
    12e6:	ff 1f       	adc	r31, r31
    12e8:	bb 1f       	adc	r27, r27
    12ea:	66 1f       	adc	r22, r22
    12ec:	77 1f       	adc	r23, r23
    12ee:	88 1f       	adc	r24, r24
    12f0:	91 50       	subi	r25, 0x01	; 1
    12f2:	50 40       	sbci	r21, 0x00	; 0
    12f4:	a9 f7       	brne	.-22     	; 0x12e0 <__mulsf3_pse+0x64>
    12f6:	9e 3f       	cpi	r25, 0xFE	; 254
    12f8:	51 05       	cpc	r21, r1
    12fa:	80 f0       	brcs	.+32     	; 0x131c <__mulsf3_pse+0xa0>
    12fc:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__fp_inf>
    1300:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__fp_szero>
    1304:	5f 3f       	cpi	r21, 0xFF	; 255
    1306:	e4 f3       	brlt	.-8      	; 0x1300 <__mulsf3_pse+0x84>
    1308:	98 3e       	cpi	r25, 0xE8	; 232
    130a:	d4 f3       	brlt	.-12     	; 0x1300 <__mulsf3_pse+0x84>
    130c:	86 95       	lsr	r24
    130e:	77 95       	ror	r23
    1310:	67 95       	ror	r22
    1312:	b7 95       	ror	r27
    1314:	f7 95       	ror	r31
    1316:	e7 95       	ror	r30
    1318:	9f 5f       	subi	r25, 0xFF	; 255
    131a:	c1 f7       	brne	.-16     	; 0x130c <__mulsf3_pse+0x90>
    131c:	fe 2b       	or	r31, r30
    131e:	88 0f       	add	r24, r24
    1320:	91 1d       	adc	r25, r1
    1322:	96 95       	lsr	r25
    1324:	87 95       	ror	r24
    1326:	97 f9       	bld	r25, 7
    1328:	08 95       	ret

0000132a <__divmodhi4>:
    132a:	97 fb       	bst	r25, 7
    132c:	07 2e       	mov	r0, r23
    132e:	16 f4       	brtc	.+4      	; 0x1334 <__divmodhi4+0xa>
    1330:	00 94       	com	r0
    1332:	07 d0       	rcall	.+14     	; 0x1342 <__divmodhi4_neg1>
    1334:	77 fd       	sbrc	r23, 7
    1336:	09 d0       	rcall	.+18     	; 0x134a <__divmodhi4_neg2>
    1338:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__udivmodhi4>
    133c:	07 fc       	sbrc	r0, 7
    133e:	05 d0       	rcall	.+10     	; 0x134a <__divmodhi4_neg2>
    1340:	3e f4       	brtc	.+14     	; 0x1350 <__divmodhi4_exit>

00001342 <__divmodhi4_neg1>:
    1342:	90 95       	com	r25
    1344:	81 95       	neg	r24
    1346:	9f 4f       	sbci	r25, 0xFF	; 255
    1348:	08 95       	ret

0000134a <__divmodhi4_neg2>:
    134a:	70 95       	com	r23
    134c:	61 95       	neg	r22
    134e:	7f 4f       	sbci	r23, 0xFF	; 255

00001350 <__divmodhi4_exit>:
    1350:	08 95       	ret

00001352 <__udivmodsi4>:
    1352:	a1 e2       	ldi	r26, 0x21	; 33
    1354:	1a 2e       	mov	r1, r26
    1356:	aa 1b       	sub	r26, r26
    1358:	bb 1b       	sub	r27, r27
    135a:	fd 01       	movw	r30, r26
    135c:	0d c0       	rjmp	.+26     	; 0x1378 <__udivmodsi4_ep>

0000135e <__udivmodsi4_loop>:
    135e:	aa 1f       	adc	r26, r26
    1360:	bb 1f       	adc	r27, r27
    1362:	ee 1f       	adc	r30, r30
    1364:	ff 1f       	adc	r31, r31
    1366:	a2 17       	cp	r26, r18
    1368:	b3 07       	cpc	r27, r19
    136a:	e4 07       	cpc	r30, r20
    136c:	f5 07       	cpc	r31, r21
    136e:	20 f0       	brcs	.+8      	; 0x1378 <__udivmodsi4_ep>
    1370:	a2 1b       	sub	r26, r18
    1372:	b3 0b       	sbc	r27, r19
    1374:	e4 0b       	sbc	r30, r20
    1376:	f5 0b       	sbc	r31, r21

00001378 <__udivmodsi4_ep>:
    1378:	66 1f       	adc	r22, r22
    137a:	77 1f       	adc	r23, r23
    137c:	88 1f       	adc	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	1a 94       	dec	r1
    1382:	69 f7       	brne	.-38     	; 0x135e <__udivmodsi4_loop>
    1384:	60 95       	com	r22
    1386:	70 95       	com	r23
    1388:	80 95       	com	r24
    138a:	90 95       	com	r25
    138c:	9b 01       	movw	r18, r22
    138e:	ac 01       	movw	r20, r24
    1390:	bd 01       	movw	r22, r26
    1392:	cf 01       	movw	r24, r30
    1394:	08 95       	ret

00001396 <__tablejump2__>:
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	05 90       	lpm	r0, Z+
    139c:	f4 91       	lpm	r31, Z
    139e:	e0 2d       	mov	r30, r0
    13a0:	09 94       	ijmp

000013a2 <__umulhisi3>:
    13a2:	a2 9f       	mul	r26, r18
    13a4:	b0 01       	movw	r22, r0
    13a6:	b3 9f       	mul	r27, r19
    13a8:	c0 01       	movw	r24, r0
    13aa:	a3 9f       	mul	r26, r19
    13ac:	70 0d       	add	r23, r0
    13ae:	81 1d       	adc	r24, r1
    13b0:	11 24       	eor	r1, r1
    13b2:	91 1d       	adc	r25, r1
    13b4:	b2 9f       	mul	r27, r18
    13b6:	70 0d       	add	r23, r0
    13b8:	81 1d       	adc	r24, r1
    13ba:	11 24       	eor	r1, r1
    13bc:	91 1d       	adc	r25, r1
    13be:	08 95       	ret

000013c0 <__udivmodhi4>:
    13c0:	aa 1b       	sub	r26, r26
    13c2:	bb 1b       	sub	r27, r27
    13c4:	51 e1       	ldi	r21, 0x11	; 17
    13c6:	07 c0       	rjmp	.+14     	; 0x13d6 <__udivmodhi4_ep>

000013c8 <__udivmodhi4_loop>:
    13c8:	aa 1f       	adc	r26, r26
    13ca:	bb 1f       	adc	r27, r27
    13cc:	a6 17       	cp	r26, r22
    13ce:	b7 07       	cpc	r27, r23
    13d0:	10 f0       	brcs	.+4      	; 0x13d6 <__udivmodhi4_ep>
    13d2:	a6 1b       	sub	r26, r22
    13d4:	b7 0b       	sbc	r27, r23

000013d6 <__udivmodhi4_ep>:
    13d6:	88 1f       	adc	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	5a 95       	dec	r21
    13dc:	a9 f7       	brne	.-22     	; 0x13c8 <__udivmodhi4_loop>
    13de:	80 95       	com	r24
    13e0:	90 95       	com	r25
    13e2:	bc 01       	movw	r22, r24
    13e4:	cd 01       	movw	r24, r26
    13e6:	08 95       	ret

000013e8 <itoa>:
    13e8:	45 32       	cpi	r20, 0x25	; 37
    13ea:	51 05       	cpc	r21, r1
    13ec:	20 f4       	brcc	.+8      	; 0x13f6 <itoa+0xe>
    13ee:	42 30       	cpi	r20, 0x02	; 2
    13f0:	10 f0       	brcs	.+4      	; 0x13f6 <itoa+0xe>
    13f2:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__itoa_ncheck>
    13f6:	fb 01       	movw	r30, r22
    13f8:	10 82       	st	Z, r1
    13fa:	cb 01       	movw	r24, r22
    13fc:	08 95       	ret

000013fe <__itoa_ncheck>:
    13fe:	bb 27       	eor	r27, r27
    1400:	4a 30       	cpi	r20, 0x0A	; 10
    1402:	31 f4       	brne	.+12     	; 0x1410 <__itoa_ncheck+0x12>
    1404:	99 23       	and	r25, r25
    1406:	22 f4       	brpl	.+8      	; 0x1410 <__itoa_ncheck+0x12>
    1408:	bd e2       	ldi	r27, 0x2D	; 45
    140a:	90 95       	com	r25
    140c:	81 95       	neg	r24
    140e:	9f 4f       	sbci	r25, 0xFF	; 255
    1410:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__utoa_common>

00001414 <__utoa_ncheck>:
    1414:	bb 27       	eor	r27, r27

00001416 <__utoa_common>:
    1416:	fb 01       	movw	r30, r22
    1418:	55 27       	eor	r21, r21
    141a:	aa 27       	eor	r26, r26
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	aa 1f       	adc	r26, r26
    1422:	a4 17       	cp	r26, r20
    1424:	10 f0       	brcs	.+4      	; 0x142a <__utoa_common+0x14>
    1426:	a4 1b       	sub	r26, r20
    1428:	83 95       	inc	r24
    142a:	50 51       	subi	r21, 0x10	; 16
    142c:	b9 f7       	brne	.-18     	; 0x141c <__utoa_common+0x6>
    142e:	a0 5d       	subi	r26, 0xD0	; 208
    1430:	aa 33       	cpi	r26, 0x3A	; 58
    1432:	08 f0       	brcs	.+2      	; 0x1436 <__utoa_common+0x20>
    1434:	a9 5d       	subi	r26, 0xD9	; 217
    1436:	a1 93       	st	Z+, r26
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	79 f7       	brne	.-34     	; 0x141a <__utoa_common+0x4>
    143c:	b1 11       	cpse	r27, r1
    143e:	b1 93       	st	Z+, r27
    1440:	11 92       	st	Z+, r1
    1442:	cb 01       	movw	r24, r22
    1444:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <strrev>

00001448 <strrev>:
    1448:	dc 01       	movw	r26, r24
    144a:	fc 01       	movw	r30, r24
    144c:	67 2f       	mov	r22, r23
    144e:	71 91       	ld	r23, Z+
    1450:	77 23       	and	r23, r23
    1452:	e1 f7       	brne	.-8      	; 0x144c <strrev+0x4>
    1454:	32 97       	sbiw	r30, 0x02	; 2
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <strrev+0x18>
    1458:	7c 91       	ld	r23, X
    145a:	6d 93       	st	X+, r22
    145c:	70 83       	st	Z, r23
    145e:	62 91       	ld	r22, -Z
    1460:	ae 17       	cp	r26, r30
    1462:	bf 07       	cpc	r27, r31
    1464:	c8 f3       	brcs	.-14     	; 0x1458 <strrev+0x10>
    1466:	08 95       	ret

00001468 <eeprom_read_byte>:
    1468:	f9 99       	sbic	0x1f, 1	; 31
    146a:	fe cf       	rjmp	.-4      	; 0x1468 <eeprom_read_byte>
    146c:	92 bd       	out	0x22, r25	; 34
    146e:	81 bd       	out	0x21, r24	; 33
    1470:	f8 9a       	sbi	0x1f, 0	; 31
    1472:	99 27       	eor	r25, r25
    1474:	80 b5       	in	r24, 0x20	; 32
    1476:	08 95       	ret

00001478 <eeprom_write_byte>:
    1478:	26 2f       	mov	r18, r22

0000147a <eeprom_write_r18>:
    147a:	f9 99       	sbic	0x1f, 1	; 31
    147c:	fe cf       	rjmp	.-4      	; 0x147a <eeprom_write_r18>
    147e:	1f ba       	out	0x1f, r1	; 31
    1480:	92 bd       	out	0x22, r25	; 34
    1482:	81 bd       	out	0x21, r24	; 33
    1484:	20 bd       	out	0x20, r18	; 32
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	fa 9a       	sbi	0x1f, 2	; 31
    148c:	f9 9a       	sbi	0x1f, 1	; 31
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	08 95       	ret

00001494 <_exit>:
    1494:	f8 94       	cli

00001496 <__stop_program>:
    1496:	ff cf       	rjmp	.-2      	; 0x1496 <__stop_program>
